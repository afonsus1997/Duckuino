
Caterina.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a8  00800100  00007ee2  00000f76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee2  00007000  00007000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  008001a8  008001a8  0000101e  2**0
                  ALLOC
  3 .debug_aranges 000002d8  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007ce  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004757  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001164  00000000  00000000  0000621b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000040a9  00000000  00000000  0000737f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000430  00000000  00000000  0000b428  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002075  00000000  00000000  0000b858  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000028a3  00000000  00000000  0000d8cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000390  00000000  00000000  00010170  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
    7000:	55 c0       	rjmp	.+170    	; 0x70ac <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
    7002:	00 00       	nop

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
    7004:	6e c0       	rjmp	.+220    	; 0x70e2 <__bad_interrupt>
    7006:	00 00       	nop
    7008:	6c c0       	rjmp	.+216    	; 0x70e2 <__bad_interrupt>
    700a:	00 00       	nop
    700c:	6a c0       	rjmp	.+212    	; 0x70e2 <__bad_interrupt>
    700e:	00 00       	nop
    7010:	68 c0       	rjmp	.+208    	; 0x70e2 <__bad_interrupt>
    7012:	00 00       	nop
    7014:	66 c0       	rjmp	.+204    	; 0x70e2 <__bad_interrupt>
    7016:	00 00       	nop
    7018:	64 c0       	rjmp	.+200    	; 0x70e2 <__bad_interrupt>
    701a:	00 00       	nop
    701c:	62 c0       	rjmp	.+196    	; 0x70e2 <__bad_interrupt>
    701e:	00 00       	nop
    7020:	60 c0       	rjmp	.+192    	; 0x70e2 <__bad_interrupt>
    7022:	00 00       	nop
    7024:	5e c0       	rjmp	.+188    	; 0x70e2 <__bad_interrupt>
    7026:	00 00       	nop
    7028:	cc c4       	rjmp	.+2456   	; 0x79c2 <__vector_10>
    702a:	00 00       	nop
    702c:	5a c0       	rjmp	.+180    	; 0x70e2 <__bad_interrupt>
    702e:	00 00       	nop
    7030:	58 c0       	rjmp	.+176    	; 0x70e2 <__bad_interrupt>
    7032:	00 00       	nop
    7034:	56 c0       	rjmp	.+172    	; 0x70e2 <__bad_interrupt>
    7036:	00 00       	nop
    7038:	54 c0       	rjmp	.+168    	; 0x70e2 <__bad_interrupt>
    703a:	00 00       	nop
    703c:	52 c0       	rjmp	.+164    	; 0x70e2 <__bad_interrupt>
    703e:	00 00       	nop
    7040:	50 c0       	rjmp	.+160    	; 0x70e2 <__bad_interrupt>
    7042:	00 00       	nop
    7044:	78 c0       	rjmp	.+240    	; 0x7136 <__vector_17>
    7046:	00 00       	nop
    7048:	4c c0       	rjmp	.+152    	; 0x70e2 <__bad_interrupt>
    704a:	00 00       	nop
    704c:	4a c0       	rjmp	.+148    	; 0x70e2 <__bad_interrupt>
    704e:	00 00       	nop
    7050:	48 c0       	rjmp	.+144    	; 0x70e2 <__bad_interrupt>
    7052:	00 00       	nop
    7054:	46 c0       	rjmp	.+140    	; 0x70e2 <__bad_interrupt>
    7056:	00 00       	nop
    7058:	44 c0       	rjmp	.+136    	; 0x70e2 <__bad_interrupt>
    705a:	00 00       	nop
    705c:	42 c0       	rjmp	.+132    	; 0x70e2 <__bad_interrupt>
    705e:	00 00       	nop
    7060:	40 c0       	rjmp	.+128    	; 0x70e2 <__bad_interrupt>
    7062:	00 00       	nop
    7064:	3e c0       	rjmp	.+124    	; 0x70e2 <__bad_interrupt>
    7066:	00 00       	nop
    7068:	3c c0       	rjmp	.+120    	; 0x70e2 <__bad_interrupt>
    706a:	00 00       	nop
    706c:	3a c0       	rjmp	.+116    	; 0x70e2 <__bad_interrupt>
    706e:	00 00       	nop
    7070:	38 c0       	rjmp	.+112    	; 0x70e2 <__bad_interrupt>
    7072:	00 00       	nop
    7074:	36 c0       	rjmp	.+108    	; 0x70e2 <__bad_interrupt>
    7076:	00 00       	nop
    7078:	34 c0       	rjmp	.+104    	; 0x70e2 <__bad_interrupt>
    707a:	00 00       	nop
    707c:	32 c0       	rjmp	.+100    	; 0x70e2 <__bad_interrupt>
    707e:	00 00       	nop
    7080:	30 c0       	rjmp	.+96     	; 0x70e2 <__bad_interrupt>
    7082:	00 00       	nop
    7084:	2e c0       	rjmp	.+92     	; 0x70e2 <__bad_interrupt>
    7086:	00 00       	nop
    7088:	2c c0       	rjmp	.+88     	; 0x70e2 <__bad_interrupt>
    708a:	00 00       	nop
    708c:	2a c0       	rjmp	.+84     	; 0x70e2 <__bad_interrupt>
    708e:	00 00       	nop
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <__bad_interrupt>
    7092:	00 00       	nop
    7094:	26 c0       	rjmp	.+76     	; 0x70e2 <__bad_interrupt>
    7096:	00 00       	nop
    7098:	24 c0       	rjmp	.+72     	; 0x70e2 <__bad_interrupt>
    709a:	00 00       	nop
    709c:	22 c0       	rjmp	.+68     	; 0x70e2 <__bad_interrupt>
    709e:	00 00       	nop
    70a0:	20 c0       	rjmp	.+64     	; 0x70e2 <__bad_interrupt>
    70a2:	00 00       	nop
    70a4:	1e c0       	rjmp	.+60     	; 0x70e2 <__bad_interrupt>
    70a6:	00 00       	nop
    70a8:	1c c0       	rjmp	.+56     	; 0x70e2 <__bad_interrupt>
    70aa:	00 00       	nop

000070ac <__ctors_end>:
    70ac:	11 24       	eor	r1, r1
    70ae:	1f be       	out	0x3f, r1	; 63
    70b0:	cf ef       	ldi	r28, 0xFF	; 255
    70b2:	da e0       	ldi	r29, 0x0A	; 10
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	cd bf       	out	0x3d, r28	; 61

000070b8 <__do_copy_data>:
    70b8:	11 e0       	ldi	r17, 0x01	; 1
    70ba:	a0 e0       	ldi	r26, 0x00	; 0
    70bc:	b1 e0       	ldi	r27, 0x01	; 1
    70be:	e2 ee       	ldi	r30, 0xE2	; 226
    70c0:	fe e7       	ldi	r31, 0x7E	; 126
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <.do_copy_data_start>

000070c4 <.do_copy_data_loop>:
    70c4:	05 90       	lpm	r0, Z+
    70c6:	0d 92       	st	X+, r0

000070c8 <.do_copy_data_start>:
    70c8:	a8 3a       	cpi	r26, 0xA8	; 168
    70ca:	b1 07       	cpc	r27, r17
    70cc:	d9 f7       	brne	.-10     	; 0x70c4 <.do_copy_data_loop>

000070ce <__do_clear_bss>:
    70ce:	11 e0       	ldi	r17, 0x01	; 1
    70d0:	a8 ea       	ldi	r26, 0xA8	; 168
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
    70d4:	01 c0       	rjmp	.+2      	; 0x70d8 <.do_clear_bss_start>

000070d6 <.do_clear_bss_loop>:
    70d6:	1d 92       	st	X+, r1

000070d8 <.do_clear_bss_start>:
    70d8:	ae 3b       	cpi	r26, 0xBE	; 190
    70da:	b1 07       	cpc	r27, r17
    70dc:	e1 f7       	brne	.-8      	; 0x70d6 <.do_clear_bss_loop>
    70de:	8f d3       	rcall	.+1822   	; 0x77fe <main>
    70e0:	fe c6       	rjmp	.+3580   	; 0x7ede <_exit>

000070e2 <__bad_interrupt>:
    70e2:	8e cf       	rjmp	.-228    	; 0x7000 <__vectors>

000070e4 <StartSketch>:
uint16_t bootKey = 0x7777;
volatile uint16_t *const bootKeyPtr = (volatile uint16_t *)0x0800;

void StartSketch(void)
{
	cli();
    70e4:	f8 94       	cli
	
	/* Undo TIMER1 setup and clear the count before running the sketch */
	TIMSK1 = 0;
    70e6:	10 92 6f 00 	sts	0x006F, r1
	TCCR1B = 0;
    70ea:	10 92 81 00 	sts	0x0081, r1
	TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
    70ee:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    70f2:	10 92 84 00 	sts	0x0084, r1
	
	/* Relocate the interrupt vector table to the application section */
	MCUCR = (1 << IVCE);
    70f6:	81 e0       	ldi	r24, 0x01	; 1
    70f8:	85 bf       	out	0x35, r24	; 53
	MCUCR = 0;
    70fa:	15 be       	out	0x35, r1	; 53

	L_LED_OFF();
    70fc:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    70fe:	5d 98       	cbi	0x0b, 5	; 11
	RX_LED_OFF();
    7100:	28 98       	cbi	0x05, 0	; 5

	/* jump to beginning of application space */
	__asm__ volatile("jmp 0x0000");
    7102:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>
}
    7106:	08 95       	ret

00007108 <LEDPulse>:

/*	Breathing animation on L LED indicates bootloader is running */
uint16_t LLEDPulse;
void LEDPulse(void)
{
	LLEDPulse++;
    7108:	20 91 b2 01 	lds	r18, 0x01B2
    710c:	30 91 b3 01 	lds	r19, 0x01B3
    7110:	2f 5f       	subi	r18, 0xFF	; 255
    7112:	3f 4f       	sbci	r19, 0xFF	; 255
    7114:	30 93 b3 01 	sts	0x01B3, r19
    7118:	20 93 b2 01 	sts	0x01B2, r18
	uint8_t p = LLEDPulse >> 8;
    711c:	93 2f       	mov	r25, r19
	if (p > 127)
    711e:	37 ff       	sbrs	r19, 7
    7120:	03 c0       	rjmp	.+6      	; 0x7128 <LEDPulse+0x20>
		p = 254-p;
    7122:	8e ef       	ldi	r24, 0xFE	; 254
    7124:	83 1b       	sub	r24, r19
    7126:	98 2f       	mov	r25, r24
	p += p;
	if (((uint8_t)LLEDPulse) > p)
    7128:	99 0f       	add	r25, r25
    712a:	92 17       	cp	r25, r18
    712c:	10 f4       	brcc	.+4      	; 0x7132 <LEDPulse+0x2a>
		L_LED_OFF();
    712e:	47 98       	cbi	0x08, 7	; 8
    7130:	08 95       	ret
	else
		L_LED_ON();
    7132:	47 9a       	sbi	0x08, 7	; 8
    7134:	08 95       	ret

00007136 <__vector_17>:
	USB_Init();
}

//uint16_t ctr = 0;
ISR(TIMER1_COMPA_vect, ISR_BLOCK)
{
    7136:	1f 92       	push	r1
    7138:	0f 92       	push	r0
    713a:	0f b6       	in	r0, 0x3f	; 63
    713c:	0f 92       	push	r0
    713e:	11 24       	eor	r1, r1
    7140:	2f 93       	push	r18
    7142:	8f 93       	push	r24
    7144:	9f 93       	push	r25
    7146:	ef 93       	push	r30
    7148:	ff 93       	push	r31
	/* Reset counter */
	TCNT1H = 0;
    714a:	10 92 85 00 	sts	0x0085, r1
	TCNT1L = 0;
    714e:	10 92 84 00 	sts	0x0084, r1

	/* Check whether the TX or RX LED one-shot period has elapsed.  if so, turn off the LED */
	if (TxLEDPulse && !(--TxLEDPulse))
    7152:	80 91 a8 01 	lds	r24, 0x01A8
    7156:	90 91 a9 01 	lds	r25, 0x01A9
    715a:	00 97       	sbiw	r24, 0x00	; 0
    715c:	41 f0       	breq	.+16     	; 0x716e <__vector_17+0x38>
    715e:	01 97       	sbiw	r24, 0x01	; 1
    7160:	90 93 a9 01 	sts	0x01A9, r25
    7164:	80 93 a8 01 	sts	0x01A8, r24
    7168:	89 2b       	or	r24, r25
    716a:	09 f4       	brne	.+2      	; 0x716e <__vector_17+0x38>
		TX_LED_OFF();
    716c:	5d 98       	cbi	0x0b, 5	; 11
	if (RxLEDPulse && !(--RxLEDPulse))
    716e:	80 91 aa 01 	lds	r24, 0x01AA
    7172:	90 91 ab 01 	lds	r25, 0x01AB
    7176:	00 97       	sbiw	r24, 0x00	; 0
    7178:	41 f0       	breq	.+16     	; 0x718a <__vector_17+0x54>
    717a:	01 97       	sbiw	r24, 0x01	; 1
    717c:	90 93 ab 01 	sts	0x01AB, r25
    7180:	80 93 aa 01 	sts	0x01AA, r24
    7184:	89 2b       	or	r24, r25
    7186:	09 f4       	brne	.+2      	; 0x718a <__vector_17+0x54>
		RX_LED_OFF();
    7188:	28 98       	cbi	0x05, 0	; 5
	
	if (pgm_read_word(0) != 0xFFFF)
    718a:	e0 e0       	ldi	r30, 0x00	; 0
    718c:	f0 e0       	ldi	r31, 0x00	; 0
    718e:	85 91       	lpm	r24, Z+
    7190:	94 91       	lpm	r25, Z+
    7192:	8f 5f       	subi	r24, 0xFF	; 255
    7194:	9f 4f       	sbci	r25, 0xFF	; 255
    7196:	49 f0       	breq	.+18     	; 0x71aa <__vector_17+0x74>
		Timeout++;
    7198:	80 91 ac 01 	lds	r24, 0x01AC
    719c:	90 91 ad 01 	lds	r25, 0x01AD
    71a0:	01 96       	adiw	r24, 0x01	; 1
    71a2:	90 93 ad 01 	sts	0x01AD, r25
    71a6:	80 93 ac 01 	sts	0x01AC, r24
}
    71aa:	ff 91       	pop	r31
    71ac:	ef 91       	pop	r30
    71ae:	9f 91       	pop	r25
    71b0:	8f 91       	pop	r24
    71b2:	2f 91       	pop	r18
    71b4:	0f 90       	pop	r0
    71b6:	0f be       	out	0x3f, r0	; 63
    71b8:	0f 90       	pop	r0
    71ba:	1f 90       	pop	r1
    71bc:	18 95       	reti

000071be <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    71be:	84 e0       	ldi	r24, 0x04	; 4
    71c0:	80 93 e9 00 	sts	0x00E9, r24
    71c4:	0d c0       	rjmp	.+26     	; 0x71e0 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    71c6:	80 91 e8 00 	lds	r24, 0x00E8
    71ca:	8b 77       	andi	r24, 0x7B	; 123
    71cc:	80 93 e8 00 	sts	0x00E8, r24
    71d0:	03 c0       	rjmp	.+6      	; 0x71d8 <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    71d2:	8e b3       	in	r24, 0x1e	; 30
    71d4:	88 23       	and	r24, r24
    71d6:	51 f0       	breq	.+20     	; 0x71ec <FetchNextCommandByte+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    71d8:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    71dc:	82 ff       	sbrs	r24, 2
    71de:	f9 cf       	rjmp	.-14     	; 0x71d2 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    71e0:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    71e4:	85 ff       	sbrs	r24, 5
    71e6:	ef cf       	rjmp	.-34     	; 0x71c6 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    71e8:	80 91 f1 00 	lds	r24, 0x00F1
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    71ec:	08 95       	ret

000071ee <WriteNextResponseByte>:
 *  bank when full ready for the next byte in the packet to the host.
 *
 *  \param[in] Response  Next response byte to send to the host
 */
static void WriteNextResponseByte(const uint8_t Response)
{
    71ee:	98 2f       	mov	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    71f0:	83 e0       	ldi	r24, 0x03	; 3
    71f2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    71f6:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPNUM);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    71fa:	85 fd       	sbrc	r24, 5
    71fc:	0d c0       	rjmp	.+26     	; 0x7218 <WriteNextResponseByte+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    71fe:	80 91 e8 00 	lds	r24, 0x00E8
    7202:	8e 77       	andi	r24, 0x7E	; 126
    7204:	80 93 e8 00 	sts	0x00E8, r24
    7208:	03 c0       	rjmp	.+6      	; 0x7210 <WriteNextResponseByte+0x22>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    720a:	8e b3       	in	r24, 0x1e	; 30
    720c:	88 23       	and	r24, r24
    720e:	69 f0       	breq	.+26     	; 0x722a <WriteNextResponseByte+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7210:	80 91 e8 00 	lds	r24, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    7214:	80 ff       	sbrs	r24, 0
    7216:	f9 cf       	rjmp	.-14     	; 0x720a <WriteNextResponseByte+0x1c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7218:	90 93 f1 00 	sts	0x00F1, r25
	}

	/* Write the next byte to the IN endpoint */
	Endpoint_Write_8(Response);
	
	TX_LED_ON();
    721c:	5d 9a       	sbi	0x0b, 5	; 11
	TxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    721e:	84 e6       	ldi	r24, 0x64	; 100
    7220:	90 e0       	ldi	r25, 0x00	; 0
    7222:	90 93 a9 01 	sts	0x01A9, r25
    7226:	80 93 a8 01 	sts	0x01A8, r24
    722a:	08 95       	ret

0000722c <CDC_Task>:

/** Task to read in AVR910 commands from the CDC data OUT endpoint, process them, perform the required actions
 *  and send the appropriate response back to the host.
 */
void CDC_Task(void)
{
    722c:	4f 92       	push	r4
    722e:	5f 92       	push	r5
    7230:	6f 92       	push	r6
    7232:	7f 92       	push	r7
    7234:	8f 92       	push	r8
    7236:	9f 92       	push	r9
    7238:	af 92       	push	r10
    723a:	bf 92       	push	r11
    723c:	cf 92       	push	r12
    723e:	df 92       	push	r13
    7240:	ef 92       	push	r14
    7242:	ff 92       	push	r15
    7244:	0f 93       	push	r16
    7246:	1f 93       	push	r17
    7248:	cf 93       	push	r28
    724a:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    724c:	84 e0       	ldi	r24, 0x04	; 4
    724e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7252:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    7256:	82 ff       	sbrs	r24, 2
    7258:	57 c2       	rjmp	.+1198   	; 0x7708 <CDC_Task+0x4dc>
	  return;
	  
	RX_LED_ON();
    725a:	28 9a       	sbi	0x05, 0	; 5
	RxLEDPulse = TX_RX_LED_PULSE_PERIOD;
    725c:	84 e6       	ldi	r24, 0x64	; 100
    725e:	90 e0       	ldi	r25, 0x00	; 0
    7260:	90 93 ab 01 	sts	0x01AB, r25
    7264:	80 93 aa 01 	sts	0x01AA, r24

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    7268:	aa df       	rcall	.-172    	; 0x71be <FetchNextCommandByte>
    726a:	18 2f       	mov	r17, r24

	if (Command == 'E')
    726c:	85 34       	cpi	r24, 0x45	; 69
    726e:	81 f4       	brne	.+32     	; 0x7290 <CDC_Task+0x64>
	{
		/* We nearly run out the bootloader timeout clock, 
		* leaving just a few hundred milliseconds so the 
		* bootloder has time to respond and service any 
		* subsequent requests */
		Timeout = TIMEOUT_PERIOD - 500;
    7270:	8c e4       	ldi	r24, 0x4C	; 76
    7272:	9d e1       	ldi	r25, 0x1D	; 29
    7274:	90 93 ad 01 	sts	0x01AD, r25
    7278:	80 93 ac 01 	sts	0x01AC, r24
	
		/* Re-enable RWW section - must be done here in case 
		 * user has disabled verification on upload.  */
		boot_rww_enable_safe();		
    727c:	07 b6       	in	r0, 0x37	; 55
    727e:	00 fc       	sbrc	r0, 0
    7280:	fd cf       	rjmp	.-6      	; 0x727c <CDC_Task+0x50>
    7282:	f9 99       	sbic	0x1f, 1	; 31
    7284:	fe cf       	rjmp	.-4      	; 0x7282 <CDC_Task+0x56>
    7286:	81 e1       	ldi	r24, 0x11	; 17
    7288:	80 93 57 00 	sts	0x0057, r24
    728c:	e8 95       	spm
    728e:	03 c0       	rjmp	.+6      	; 0x7296 <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
    7290:	84 35       	cpi	r24, 0x54	; 84
    7292:	19 f4       	brne	.+6      	; 0x729a <CDC_Task+0x6e>
	{
		FetchNextCommandByte();
    7294:	94 df       	rcall	.-216    	; 0x71be <FetchNextCommandByte>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
    7296:	8d e0       	ldi	r24, 0x0D	; 13
    7298:	0d c2       	rjmp	.+1050   	; 0x76b4 <CDC_Task+0x488>
	}
	else if ((Command == 'L') || (Command == 'P'))
    729a:	8c 34       	cpi	r24, 0x4C	; 76
    729c:	e1 f3       	breq	.-8      	; 0x7296 <CDC_Task+0x6a>
    729e:	80 35       	cpi	r24, 0x50	; 80
    72a0:	d1 f3       	breq	.-12     	; 0x7296 <CDC_Task+0x6a>
	{
		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    72a2:	84 37       	cpi	r24, 0x74	; 116
    72a4:	21 f4       	brne	.+8      	; 0x72ae <CDC_Task+0x82>
	{
		// Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader 
		WriteNextResponseByte(0x44);
    72a6:	84 e4       	ldi	r24, 0x44	; 68
    72a8:	a2 df       	rcall	.-188    	; 0x71ee <WriteNextResponseByte>
		WriteNextResponseByte(0x00);
    72aa:	80 e0       	ldi	r24, 0x00	; 0
    72ac:	03 c2       	rjmp	.+1030   	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 'a')
    72ae:	81 36       	cpi	r24, 0x61	; 97
    72b0:	11 f4       	brne	.+4      	; 0x72b6 <CDC_Task+0x8a>
	{
		// Indicate auto-address increment is supported 
		WriteNextResponseByte('Y');
    72b2:	89 e5       	ldi	r24, 0x59	; 89
    72b4:	ff c1       	rjmp	.+1022   	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 'A')
    72b6:	81 34       	cpi	r24, 0x41	; 65
    72b8:	b1 f4       	brne	.+44     	; 0x72e6 <CDC_Task+0xba>
	{
		// Set the current address to that given by the host 
		CurrAddress   = (FetchNextCommandByte() << 9);
    72ba:	81 df       	rcall	.-254    	; 0x71be <FetchNextCommandByte>
    72bc:	18 2f       	mov	r17, r24
		CurrAddress  |= (FetchNextCommandByte() << 1);
    72be:	7f df       	rcall	.-258    	; 0x71be <FetchNextCommandByte>
    72c0:	90 e0       	ldi	r25, 0x00	; 0
    72c2:	88 0f       	add	r24, r24
    72c4:	99 1f       	adc	r25, r25
    72c6:	aa 27       	eor	r26, r26
    72c8:	97 fd       	sbrc	r25, 7
    72ca:	a0 95       	com	r26
    72cc:	ba 2f       	mov	r27, r26
    72ce:	31 2f       	mov	r19, r17
    72d0:	33 0f       	add	r19, r19
    72d2:	20 e0       	ldi	r18, 0x00	; 0
    72d4:	44 27       	eor	r20, r20
    72d6:	37 fd       	sbrc	r19, 7
    72d8:	40 95       	com	r20
    72da:	54 2f       	mov	r21, r20
    72dc:	82 2b       	or	r24, r18
    72de:	93 2b       	or	r25, r19
    72e0:	a4 2b       	or	r26, r20
    72e2:	b5 2b       	or	r27, r21
    72e4:	b8 c1       	rjmp	.+880    	; 0x7656 <CDC_Task+0x42a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    72e6:	80 37       	cpi	r24, 0x70	; 112
    72e8:	11 f4       	brne	.+4      	; 0x72ee <CDC_Task+0xc2>
	{
		// Indicate serial programmer back to the host 
		WriteNextResponseByte('S');
    72ea:	83 e5       	ldi	r24, 0x53	; 83
    72ec:	e3 c1       	rjmp	.+966    	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 'S')
    72ee:	83 35       	cpi	r24, 0x53	; 83
    72f0:	49 f4       	brne	.+18     	; 0x7304 <CDC_Task+0xd8>
    72f2:	c0 e0       	ldi	r28, 0x00	; 0
    72f4:	d1 e0       	ldi	r29, 0x01	; 1
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    72f6:	89 91       	ld	r24, Y+
    72f8:	7a df       	rcall	.-268    	; 0x71ee <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		// Write the 7-byte software identifier to the endpoint 
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    72fa:	21 e0       	ldi	r18, 0x01	; 1
    72fc:	c7 30       	cpi	r28, 0x07	; 7
    72fe:	d2 07       	cpc	r29, r18
    7300:	d1 f7       	brne	.-12     	; 0x72f6 <CDC_Task+0xca>
    7302:	d9 c1       	rjmp	.+946    	; 0x76b6 <CDC_Task+0x48a>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    7304:	86 35       	cpi	r24, 0x56	; 86
    7306:	21 f4       	brne	.+8      	; 0x7310 <CDC_Task+0xe4>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    7308:	81 e3       	ldi	r24, 0x31	; 49
    730a:	71 df       	rcall	.-286    	; 0x71ee <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    730c:	80 e3       	ldi	r24, 0x30	; 48
    730e:	d2 c1       	rjmp	.+932    	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 's')
    7310:	83 37       	cpi	r24, 0x73	; 115
    7312:	31 f4       	brne	.+12     	; 0x7320 <CDC_Task+0xf4>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    7314:	87 e8       	ldi	r24, 0x87	; 135
    7316:	6b df       	rcall	.-298    	; 0x71ee <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
    7318:	85 e9       	ldi	r24, 0x95	; 149
    731a:	69 df       	rcall	.-302    	; 0x71ee <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_1);
    731c:	8e e1       	ldi	r24, 0x1E	; 30
    731e:	ca c1       	rjmp	.+916    	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 'e')
    7320:	85 36       	cpi	r24, 0x65	; 101
    7322:	b9 f4       	brne	.+46     	; 0x7352 <CDC_Task+0x126>
    7324:	e0 e0       	ldi	r30, 0x00	; 0
    7326:	f0 e0       	ldi	r31, 0x00	; 0
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    7328:	93 e0       	ldi	r25, 0x03	; 3
			boot_spm_busy_wait();
			boot_page_write(CurrFlashAddress);
    732a:	85 e0       	ldi	r24, 0x05	; 5
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    732c:	90 93 57 00 	sts	0x0057, r25
    7330:	e8 95       	spm
			boot_spm_busy_wait();
    7332:	07 b6       	in	r0, 0x37	; 55
    7334:	00 fc       	sbrc	r0, 0
    7336:	fd cf       	rjmp	.-6      	; 0x7332 <CDC_Task+0x106>
			boot_page_write(CurrFlashAddress);
    7338:	80 93 57 00 	sts	0x0057, r24
    733c:	e8 95       	spm
			boot_spm_busy_wait();
    733e:	07 b6       	in	r0, 0x37	; 55
    7340:	00 fc       	sbrc	r0, 0
    7342:	fd cf       	rjmp	.-6      	; 0x733e <CDC_Task+0x112>
    7344:	e0 58       	subi	r30, 0x80	; 128
    7346:	ff 4f       	sbci	r31, 0xFF	; 255
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		// Clear the application section of flash 
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    7348:	a0 e7       	ldi	r26, 0x70	; 112
    734a:	e0 30       	cpi	r30, 0x00	; 0
    734c:	fa 07       	cpc	r31, r26
    734e:	71 f7       	brne	.-36     	; 0x732c <CDC_Task+0x100>
    7350:	a2 cf       	rjmp	.-188    	; 0x7296 <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    7352:	82 37       	cpi	r24, 0x72	; 114
    7354:	39 f4       	brne	.+14     	; 0x7364 <CDC_Task+0x138>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    7356:	e1 e0       	ldi	r30, 0x01	; 1
    7358:	f0 e0       	ldi	r31, 0x00	; 0
    735a:	89 e0       	ldi	r24, 0x09	; 9
    735c:	80 93 57 00 	sts	0x0057, r24
    7360:	84 91       	lpm	r24, Z+
    7362:	a8 c1       	rjmp	.+848    	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 'F')
    7364:	86 34       	cpi	r24, 0x46	; 70
    7366:	39 f4       	brne	.+14     	; 0x7376 <CDC_Task+0x14a>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    7368:	e0 e0       	ldi	r30, 0x00	; 0
    736a:	f0 e0       	ldi	r31, 0x00	; 0
    736c:	89 e0       	ldi	r24, 0x09	; 9
    736e:	80 93 57 00 	sts	0x0057, r24
    7372:	84 91       	lpm	r24, Z+
    7374:	9f c1       	rjmp	.+830    	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 'N')
    7376:	8e 34       	cpi	r24, 0x4E	; 78
    7378:	39 f4       	brne	.+14     	; 0x7388 <CDC_Task+0x15c>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    737a:	e3 e0       	ldi	r30, 0x03	; 3
    737c:	f0 e0       	ldi	r31, 0x00	; 0
    737e:	89 e0       	ldi	r24, 0x09	; 9
    7380:	80 93 57 00 	sts	0x0057, r24
    7384:	84 91       	lpm	r24, Z+
    7386:	96 c1       	rjmp	.+812    	; 0x76b4 <CDC_Task+0x488>
	}
	else if (Command == 'Q')
    7388:	81 35       	cpi	r24, 0x51	; 81
    738a:	39 f4       	brne	.+14     	; 0x739a <CDC_Task+0x16e>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    738c:	e2 e0       	ldi	r30, 0x02	; 2
    738e:	f0 e0       	ldi	r31, 0x00	; 0
    7390:	89 e0       	ldi	r24, 0x09	; 9
    7392:	80 93 57 00 	sts	0x0057, r24
    7396:	84 91       	lpm	r24, Z+
    7398:	8d c1       	rjmp	.+794    	; 0x76b4 <CDC_Task+0x488>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    739a:	82 36       	cpi	r24, 0x62	; 98
    739c:	31 f4       	brne	.+12     	; 0x73aa <CDC_Task+0x17e>
	{
		WriteNextResponseByte('Y');
    739e:	89 e5       	ldi	r24, 0x59	; 89
    73a0:	26 df       	rcall	.-436    	; 0x71ee <WriteNextResponseByte>

		// Send block size to the host 
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    73a2:	80 e0       	ldi	r24, 0x00	; 0
    73a4:	24 df       	rcall	.-440    	; 0x71ee <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    73a6:	80 e8       	ldi	r24, 0x80	; 128
    73a8:	85 c1       	rjmp	.+778    	; 0x76b4 <CDC_Task+0x488>
	}
	else if ((Command == 'B') || (Command == 'g'))
    73aa:	82 34       	cpi	r24, 0x42	; 66
    73ac:	19 f0       	breq	.+6      	; 0x73b4 <CDC_Task+0x188>
    73ae:	87 36       	cpi	r24, 0x67	; 103
    73b0:	09 f0       	breq	.+2      	; 0x73b4 <CDC_Task+0x188>
    73b2:	e5 c0       	rjmp	.+458    	; 0x757e <CDC_Task+0x352>
	{
		// Keep resetting the timeout counter if we're receiving self-programming instructions
		Timeout = 0;
    73b4:	10 92 ad 01 	sts	0x01AD, r1
    73b8:	10 92 ac 01 	sts	0x01AC, r1
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    73bc:	00 df       	rcall	.-512    	; 0x71be <FetchNextCommandByte>
    73be:	08 2f       	mov	r16, r24
	BlockSize |=  FetchNextCommandByte();
    73c0:	fe de       	rcall	.-516    	; 0x71be <FetchNextCommandByte>
    73c2:	f8 2e       	mov	r15, r24

	MemoryType =  FetchNextCommandByte();
    73c4:	fc de       	rcall	.-520    	; 0x71be <FetchNextCommandByte>
    73c6:	68 2e       	mov	r6, r24

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    73c8:	85 54       	subi	r24, 0x45	; 69
    73ca:	82 30       	cpi	r24, 0x02	; 2
    73cc:	08 f0       	brcs	.+2      	; 0x73d0 <CDC_Task+0x1a4>
    73ce:	71 c1       	rjmp	.+738    	; 0x76b2 <CDC_Task+0x486>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    73d0:	90 2f       	mov	r25, r16
    73d2:	80 e0       	ldi	r24, 0x00	; 0
	BlockSize |=  FetchNextCommandByte();
    73d4:	cf 2d       	mov	r28, r15
    73d6:	d0 e0       	ldi	r29, 0x00	; 0
    73d8:	c8 2b       	or	r28, r24
    73da:	d9 2b       	or	r29, r25
		return;
	}

	/* Disable timer 1 interrupt - can't afford to process nonessential interrupts
	 * while doing SPM tasks */
	TIMSK1 = 0;
    73dc:	10 92 6f 00 	sts	0x006F, r1

	/* Check if command is to read memory */
	if (Command == 'g')
    73e0:	17 36       	cpi	r17, 0x67	; 103
    73e2:	09 f0       	breq	.+2      	; 0x73e6 <CDC_Task+0x1ba>
    73e4:	4b c0       	rjmp	.+150    	; 0x747c <CDC_Task+0x250>
	{		
		/* Re-enable RWW section */
		boot_rww_enable();
    73e6:	81 e1       	ldi	r24, 0x11	; 17
    73e8:	80 93 57 00 	sts	0x0057, r24
    73ec:	e8 95       	spm
    73ee:	dd 24       	eor	r13, r13

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
				  CurrAddress += 2;

				HighByte = !HighByte;
    73f0:	cc 24       	eor	r12, r12
    73f2:	c3 94       	inc	r12
    73f4:	3f c0       	rjmp	.+126    	; 0x7474 <CDC_Task+0x248>
    73f6:	e0 90 ae 01 	lds	r14, 0x01AE
    73fa:	f0 90 af 01 	lds	r15, 0x01AF
    73fe:	00 91 b0 01 	lds	r16, 0x01B0
    7402:	10 91 b1 01 	lds	r17, 0x01B1
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    7406:	b6 e4       	ldi	r27, 0x46	; 70
    7408:	6b 16       	cp	r6, r27
    740a:	d9 f4       	brne	.+54     	; 0x7442 <CDC_Task+0x216>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    740c:	ed 2d       	mov	r30, r13
    740e:	f0 e0       	ldi	r31, 0x00	; 0
    7410:	ee 29       	or	r30, r14
    7412:	ff 29       	or	r31, r15
    7414:	e4 91       	lpm	r30, Z+
    7416:	8e 2f       	mov	r24, r30
    7418:	ea de       	rcall	.-556    	; 0x71ee <WriteNextResponseByte>
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    741a:	dd 20       	and	r13, r13
    741c:	81 f0       	breq	.+32     	; 0x743e <CDC_Task+0x212>
				  CurrAddress += 2;
    741e:	82 e0       	ldi	r24, 0x02	; 2
    7420:	90 e0       	ldi	r25, 0x00	; 0
    7422:	a0 e0       	ldi	r26, 0x00	; 0
    7424:	b0 e0       	ldi	r27, 0x00	; 0
    7426:	e8 0e       	add	r14, r24
    7428:	f9 1e       	adc	r15, r25
    742a:	0a 1f       	adc	r16, r26
    742c:	1b 1f       	adc	r17, r27
    742e:	e0 92 ae 01 	sts	0x01AE, r14
    7432:	f0 92 af 01 	sts	0x01AF, r15
    7436:	00 93 b0 01 	sts	0x01B0, r16
    743a:	10 93 b1 01 	sts	0x01B1, r17

				HighByte = !HighByte;
    743e:	dc 24       	eor	r13, r12
    7440:	18 c0       	rjmp	.+48     	; 0x7472 <CDC_Task+0x246>
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    7442:	d8 01       	movw	r26, r16
    7444:	c7 01       	movw	r24, r14
    7446:	b6 95       	lsr	r27
    7448:	a7 95       	ror	r26
    744a:	97 95       	ror	r25
    744c:	87 95       	ror	r24
    744e:	31 d5       	rcall	.+2658   	; 0x7eb2 <__eerd_byte_m32u4>
    7450:	ce de       	rcall	.-612    	; 0x71ee <WriteNextResponseByte>

				/* Increment the address counter after use */
				CurrAddress += 2;
    7452:	82 e0       	ldi	r24, 0x02	; 2
    7454:	90 e0       	ldi	r25, 0x00	; 0
    7456:	a0 e0       	ldi	r26, 0x00	; 0
    7458:	b0 e0       	ldi	r27, 0x00	; 0
    745a:	e8 0e       	add	r14, r24
    745c:	f9 1e       	adc	r15, r25
    745e:	0a 1f       	adc	r16, r26
    7460:	1b 1f       	adc	r17, r27
    7462:	e0 92 ae 01 	sts	0x01AE, r14
    7466:	f0 92 af 01 	sts	0x01AF, r15
    746a:	00 93 b0 01 	sts	0x01B0, r16
    746e:	10 93 b1 01 	sts	0x01B1, r17
    7472:	21 97       	sbiw	r28, 0x01	; 1
	if (Command == 'g')
	{		
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    7474:	20 97       	sbiw	r28, 0x00	; 0
    7476:	09 f0       	breq	.+2      	; 0x747a <CDC_Task+0x24e>
    7478:	be cf       	rjmp	.-132    	; 0x73f6 <CDC_Task+0x1ca>
    747a:	7d c0       	rjmp	.+250    	; 0x7576 <CDC_Task+0x34a>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    747c:	80 90 ae 01 	lds	r8, 0x01AE
    7480:	90 90 af 01 	lds	r9, 0x01AF
    7484:	a0 90 b0 01 	lds	r10, 0x01B0
    7488:	b0 90 b1 01 	lds	r11, 0x01B1

		if (MemoryType == 'F')
    748c:	96 e4       	ldi	r25, 0x46	; 70
    748e:	69 16       	cp	r6, r25
    7490:	09 f0       	breq	.+2      	; 0x7494 <CDC_Task+0x268>
    7492:	5d c0       	rjmp	.+186    	; 0x754e <CDC_Task+0x322>
		{
			boot_page_erase(PageStartAddress);
    7494:	83 e0       	ldi	r24, 0x03	; 3
    7496:	f4 01       	movw	r30, r8
    7498:	80 93 57 00 	sts	0x0057, r24
    749c:	e8 95       	spm
			boot_spm_busy_wait();
    749e:	07 b6       	in	r0, 0x37	; 55
    74a0:	00 fc       	sbrc	r0, 0
    74a2:	fd cf       	rjmp	.-6      	; 0x749e <CDC_Task+0x272>
    74a4:	54 c0       	rjmp	.+168    	; 0x754e <CDC_Task+0x322>
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    74a6:	f6 e4       	ldi	r31, 0x46	; 70
    74a8:	6f 16       	cp	r6, r31
    74aa:	61 f5       	brne	.+88     	; 0x7504 <CDC_Task+0x2d8>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    74ac:	77 20       	and	r7, r7
    74ae:	31 f1       	breq	.+76     	; 0x74fc <CDC_Task+0x2d0>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    74b0:	e0 90 ae 01 	lds	r14, 0x01AE
    74b4:	f0 90 af 01 	lds	r15, 0x01AF
    74b8:	00 91 b0 01 	lds	r16, 0x01B0
    74bc:	10 91 b1 01 	lds	r17, 0x01B1
    74c0:	7e de       	rcall	.-772    	; 0x71be <FetchNextCommandByte>
    74c2:	d8 2e       	mov	r13, r24
    74c4:	cc 24       	eor	r12, r12
    74c6:	85 2d       	mov	r24, r5
    74c8:	90 e0       	ldi	r25, 0x00	; 0
    74ca:	8c 29       	or	r24, r12
    74cc:	9d 29       	or	r25, r13
    74ce:	f7 01       	movw	r30, r14
    74d0:	0c 01       	movw	r0, r24
    74d2:	40 92 57 00 	sts	0x0057, r4
    74d6:	e8 95       	spm
    74d8:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
    74da:	82 e0       	ldi	r24, 0x02	; 2
    74dc:	90 e0       	ldi	r25, 0x00	; 0
    74de:	a0 e0       	ldi	r26, 0x00	; 0
    74e0:	b0 e0       	ldi	r27, 0x00	; 0
    74e2:	e8 0e       	add	r14, r24
    74e4:	f9 1e       	adc	r15, r25
    74e6:	0a 1f       	adc	r16, r26
    74e8:	1b 1f       	adc	r17, r27
    74ea:	e0 92 ae 01 	sts	0x01AE, r14
    74ee:	f0 92 af 01 	sts	0x01AF, r15
    74f2:	00 93 b0 01 	sts	0x01B0, r16
    74f6:	10 93 b1 01 	sts	0x01B1, r17
    74fa:	02 c0       	rjmp	.+4      	; 0x7500 <CDC_Task+0x2d4>
				}
				else
				{
					LowByte = FetchNextCommandByte();
    74fc:	60 de       	rcall	.-832    	; 0x71be <FetchNextCommandByte>
    74fe:	58 2e       	mov	r5, r24
				}
				
				HighByte = !HighByte;
    7500:	74 24       	eor	r7, r4
    7502:	23 c0       	rjmp	.+70     	; 0x754a <CDC_Task+0x31e>
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7504:	e0 90 ae 01 	lds	r14, 0x01AE
    7508:	f0 90 af 01 	lds	r15, 0x01AF
    750c:	00 91 b0 01 	lds	r16, 0x01B0
    7510:	10 91 b1 01 	lds	r17, 0x01B1
    7514:	16 95       	lsr	r17
    7516:	07 95       	ror	r16
    7518:	f7 94       	ror	r15
    751a:	e7 94       	ror	r14
    751c:	50 de       	rcall	.-864    	; 0x71be <FetchNextCommandByte>
    751e:	68 2f       	mov	r22, r24
    7520:	c7 01       	movw	r24, r14
    7522:	cf d4       	rcall	.+2462   	; 0x7ec2 <__eewr_byte_m32u4>

				/* Increment the address counter after use */
				CurrAddress += 2;
    7524:	80 91 ae 01 	lds	r24, 0x01AE
    7528:	90 91 af 01 	lds	r25, 0x01AF
    752c:	a0 91 b0 01 	lds	r26, 0x01B0
    7530:	b0 91 b1 01 	lds	r27, 0x01B1
    7534:	02 96       	adiw	r24, 0x02	; 2
    7536:	a1 1d       	adc	r26, r1
    7538:	b1 1d       	adc	r27, r1
    753a:	80 93 ae 01 	sts	0x01AE, r24
    753e:	90 93 af 01 	sts	0x01AF, r25
    7542:	a0 93 b0 01 	sts	0x01B0, r26
    7546:	b0 93 b1 01 	sts	0x01B1, r27
    754a:	21 97       	sbiw	r28, 0x01	; 1
    754c:	04 c0       	rjmp	.+8      	; 0x7556 <CDC_Task+0x32a>
    754e:	55 24       	eor	r5, r5
    7550:	77 24       	eor	r7, r7
				else
				{
					LowByte = FetchNextCommandByte();
				}
				
				HighByte = !HighByte;
    7552:	44 24       	eor	r4, r4
    7554:	43 94       	inc	r4
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    7556:	20 97       	sbiw	r28, 0x00	; 0
    7558:	09 f0       	breq	.+2      	; 0x755c <CDC_Task+0x330>
    755a:	a5 cf       	rjmp	.-182    	; 0x74a6 <CDC_Task+0x27a>
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    755c:	96 e4       	ldi	r25, 0x46	; 70
    755e:	69 16       	cp	r6, r25
    7560:	41 f4       	brne	.+16     	; 0x7572 <CDC_Task+0x346>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    7562:	85 e0       	ldi	r24, 0x05	; 5
    7564:	f4 01       	movw	r30, r8
    7566:	80 93 57 00 	sts	0x0057, r24
    756a:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    756c:	07 b6       	in	r0, 0x37	; 55
    756e:	00 fc       	sbrc	r0, 0
    7570:	fd cf       	rjmp	.-6      	; 0x756c <CDC_Task+0x340>
		}

		/* Send response byte back to the host */
		WriteNextResponseByte('\r');
    7572:	8d e0       	ldi	r24, 0x0D	; 13
    7574:	3c de       	rcall	.-904    	; 0x71ee <WriteNextResponseByte>
	}

	/* Re-enable timer 1 interrupt disabled earlier in this routine */	
	TIMSK1 = (1 << OCIE1A);
    7576:	82 e0       	ldi	r24, 0x02	; 2
    7578:	80 93 6f 00 	sts	0x006F, r24
    757c:	9c c0       	rjmp	.+312    	; 0x76b6 <CDC_Task+0x48a>
		// Delegate the block write/read to a separate function for clarity 
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    757e:	83 34       	cpi	r24, 0x43	; 67
    7580:	71 f4       	brne	.+28     	; 0x759e <CDC_Task+0x372>
	{
		// Write the high byte to the current flash page
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    7582:	00 91 ae 01 	lds	r16, 0x01AE
    7586:	10 91 af 01 	lds	r17, 0x01AF
    758a:	19 de       	rcall	.-974    	; 0x71be <FetchNextCommandByte>
    758c:	90 e0       	ldi	r25, 0x00	; 0
    758e:	21 e0       	ldi	r18, 0x01	; 1
    7590:	f8 01       	movw	r30, r16
    7592:	0c 01       	movw	r0, r24
    7594:	20 93 57 00 	sts	0x0057, r18
    7598:	e8 95       	spm
    759a:	11 24       	eor	r1, r1
    759c:	7c ce       	rjmp	.-776    	; 0x7296 <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    759e:	83 36       	cpi	r24, 0x63	; 99
    75a0:	19 f5       	brne	.+70     	; 0x75e8 <CDC_Task+0x3bc>
	{
		// Write the low byte to the current flash page 
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    75a2:	e0 90 ae 01 	lds	r14, 0x01AE
    75a6:	f0 90 af 01 	lds	r15, 0x01AF
    75aa:	00 91 b0 01 	lds	r16, 0x01B0
    75ae:	10 91 b1 01 	lds	r17, 0x01B1
    75b2:	05 de       	rcall	.-1014   	; 0x71be <FetchNextCommandByte>
    75b4:	f7 01       	movw	r30, r14
    75b6:	e1 60       	ori	r30, 0x01	; 1
    75b8:	90 e0       	ldi	r25, 0x00	; 0
    75ba:	21 e0       	ldi	r18, 0x01	; 1
    75bc:	0c 01       	movw	r0, r24
    75be:	20 93 57 00 	sts	0x0057, r18
    75c2:	e8 95       	spm
    75c4:	11 24       	eor	r1, r1

		// Increment the address 
		CurrAddress += 2;
    75c6:	82 e0       	ldi	r24, 0x02	; 2
    75c8:	90 e0       	ldi	r25, 0x00	; 0
    75ca:	a0 e0       	ldi	r26, 0x00	; 0
    75cc:	b0 e0       	ldi	r27, 0x00	; 0
    75ce:	e8 0e       	add	r14, r24
    75d0:	f9 1e       	adc	r15, r25
    75d2:	0a 1f       	adc	r16, r26
    75d4:	1b 1f       	adc	r17, r27
    75d6:	e0 92 ae 01 	sts	0x01AE, r14
    75da:	f0 92 af 01 	sts	0x01AF, r15
    75de:	00 93 b0 01 	sts	0x01B0, r16
    75e2:	10 93 b1 01 	sts	0x01B1, r17
    75e6:	57 ce       	rjmp	.-850    	; 0x7296 <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    75e8:	8d 36       	cpi	r24, 0x6D	; 109
    75ea:	61 f4       	brne	.+24     	; 0x7604 <CDC_Task+0x3d8>
	{
		// Commit the flash page to memory
		boot_page_write(CurrAddress);
    75ec:	e0 91 ae 01 	lds	r30, 0x01AE
    75f0:	f0 91 af 01 	lds	r31, 0x01AF
    75f4:	85 e0       	ldi	r24, 0x05	; 5
    75f6:	80 93 57 00 	sts	0x0057, r24
    75fa:	e8 95       	spm

		// Wait until write operation has completed 
		boot_spm_busy_wait();
    75fc:	07 b6       	in	r0, 0x37	; 55
    75fe:	00 fc       	sbrc	r0, 0
    7600:	fd cf       	rjmp	.-6      	; 0x75fc <CDC_Task+0x3d0>
    7602:	49 ce       	rjmp	.-878    	; 0x7296 <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    7604:	82 35       	cpi	r24, 0x52	; 82
    7606:	51 f4       	brne	.+20     	; 0x761c <CDC_Task+0x3f0>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    7608:	e0 91 ae 01 	lds	r30, 0x01AE
    760c:	f0 91 af 01 	lds	r31, 0x01AF
    7610:	05 91       	lpm	r16, Z+
    7612:	14 91       	lpm	r17, Z+
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    7614:	81 2f       	mov	r24, r17
    7616:	eb dd       	rcall	.-1066   	; 0x71ee <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
    7618:	80 2f       	mov	r24, r16
    761a:	4c c0       	rjmp	.+152    	; 0x76b4 <CDC_Task+0x488>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    761c:	84 34       	cpi	r24, 0x44	; 68
    761e:	21 f5       	brne	.+72     	; 0x7668 <CDC_Task+0x43c>
	{
		// Read the byte from the endpoint and write it to the EEPROM 
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    7620:	e0 90 ae 01 	lds	r14, 0x01AE
    7624:	f0 90 af 01 	lds	r15, 0x01AF
    7628:	00 91 b0 01 	lds	r16, 0x01B0
    762c:	10 91 b1 01 	lds	r17, 0x01B1
    7630:	16 95       	lsr	r17
    7632:	07 95       	ror	r16
    7634:	f7 94       	ror	r15
    7636:	e7 94       	ror	r14
    7638:	c2 dd       	rcall	.-1148   	; 0x71be <FetchNextCommandByte>
    763a:	68 2f       	mov	r22, r24
    763c:	c7 01       	movw	r24, r14
    763e:	41 d4       	rcall	.+2178   	; 0x7ec2 <__eewr_byte_m32u4>

		// Increment the address after use
		CurrAddress += 2;
    7640:	80 91 ae 01 	lds	r24, 0x01AE
    7644:	90 91 af 01 	lds	r25, 0x01AF
    7648:	a0 91 b0 01 	lds	r26, 0x01B0
    764c:	b0 91 b1 01 	lds	r27, 0x01B1
    7650:	02 96       	adiw	r24, 0x02	; 2
    7652:	a1 1d       	adc	r26, r1
    7654:	b1 1d       	adc	r27, r1
    7656:	80 93 ae 01 	sts	0x01AE, r24
    765a:	90 93 af 01 	sts	0x01AF, r25
    765e:	a0 93 b0 01 	sts	0x01B0, r26
    7662:	b0 93 b1 01 	sts	0x01B1, r27
    7666:	17 ce       	rjmp	.-978    	; 0x7296 <CDC_Task+0x6a>

		// Send confirmation byte back to the host 
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
    7668:	84 36       	cpi	r24, 0x64	; 100
    766a:	09 f5       	brne	.+66     	; 0x76ae <CDC_Task+0x482>
	{
		// Read the EEPROM byte and write it to the endpoint 
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    766c:	e0 90 ae 01 	lds	r14, 0x01AE
    7670:	f0 90 af 01 	lds	r15, 0x01AF
    7674:	00 91 b0 01 	lds	r16, 0x01B0
    7678:	10 91 b1 01 	lds	r17, 0x01B1
    767c:	d8 01       	movw	r26, r16
    767e:	c7 01       	movw	r24, r14
    7680:	b6 95       	lsr	r27
    7682:	a7 95       	ror	r26
    7684:	97 95       	ror	r25
    7686:	87 95       	ror	r24
    7688:	14 d4       	rcall	.+2088   	; 0x7eb2 <__eerd_byte_m32u4>
    768a:	b1 dd       	rcall	.-1182   	; 0x71ee <WriteNextResponseByte>

		// Increment the address after use 
		CurrAddress += 2;
    768c:	82 e0       	ldi	r24, 0x02	; 2
    768e:	90 e0       	ldi	r25, 0x00	; 0
    7690:	a0 e0       	ldi	r26, 0x00	; 0
    7692:	b0 e0       	ldi	r27, 0x00	; 0
    7694:	e8 0e       	add	r14, r24
    7696:	f9 1e       	adc	r15, r25
    7698:	0a 1f       	adc	r16, r26
    769a:	1b 1f       	adc	r17, r27
    769c:	e0 92 ae 01 	sts	0x01AE, r14
    76a0:	f0 92 af 01 	sts	0x01AF, r15
    76a4:	00 93 b0 01 	sts	0x01B0, r16
    76a8:	10 93 b1 01 	sts	0x01B1, r17
    76ac:	04 c0       	rjmp	.+8      	; 0x76b6 <CDC_Task+0x48a>
	}
	#endif
	else if (Command != 27)
    76ae:	8b 31       	cpi	r24, 0x1B	; 27
    76b0:	11 f0       	breq	.+4      	; 0x76b6 <CDC_Task+0x48a>
	{
		// Unknown (non-sync) command, return fail code 
		WriteNextResponseByte('?');
    76b2:	8f e3       	ldi	r24, 0x3F	; 63
    76b4:	9c dd       	rcall	.-1224   	; 0x71ee <WriteNextResponseByte>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    76b6:	83 e0       	ldi	r24, 0x03	; 3
    76b8:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    76bc:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76c0:	80 91 e8 00 	lds	r24, 0x00E8
    76c4:	8e 77       	andi	r24, 0x7E	; 126
    76c6:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    76ca:	95 ff       	sbrs	r25, 5
    76cc:	04 c0       	rjmp	.+8      	; 0x76d6 <CDC_Task+0x4aa>
    76ce:	10 c0       	rjmp	.+32     	; 0x76f0 <CDC_Task+0x4c4>
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    76d0:	8e b3       	in	r24, 0x1e	; 30
    76d2:	88 23       	and	r24, r24
    76d4:	c9 f0       	breq	.+50     	; 0x7708 <CDC_Task+0x4dc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76d6:	80 91 e8 00 	lds	r24, 0x00E8
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
    76da:	80 ff       	sbrs	r24, 0
    76dc:	f9 cf       	rjmp	.-14     	; 0x76d0 <CDC_Task+0x4a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    76de:	80 91 e8 00 	lds	r24, 0x00E8
    76e2:	8e 77       	andi	r24, 0x7E	; 126
    76e4:	80 93 e8 00 	sts	0x00E8, r24
    76e8:	03 c0       	rjmp	.+6      	; 0x76f0 <CDC_Task+0x4c4>
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    76ea:	8e b3       	in	r24, 0x1e	; 30
    76ec:	88 23       	and	r24, r24
    76ee:	61 f0       	breq	.+24     	; 0x7708 <CDC_Task+0x4dc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    76f0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    76f4:	80 ff       	sbrs	r24, 0
    76f6:	f9 cf       	rjmp	.-14     	; 0x76ea <CDC_Task+0x4be>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    76f8:	84 e0       	ldi	r24, 0x04	; 4
    76fa:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    76fe:	80 91 e8 00 	lds	r24, 0x00E8
    7702:	8b 77       	andi	r24, 0x7B	; 123
    7704:	80 93 e8 00 	sts	0x00E8, r24
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPNUM);

	/* Acknowledge the command from the host */
	Endpoint_ClearOUT();
}
    7708:	df 91       	pop	r29
    770a:	cf 91       	pop	r28
    770c:	1f 91       	pop	r17
    770e:	0f 91       	pop	r16
    7710:	ff 90       	pop	r15
    7712:	ef 90       	pop	r14
    7714:	df 90       	pop	r13
    7716:	cf 90       	pop	r12
    7718:	bf 90       	pop	r11
    771a:	af 90       	pop	r10
    771c:	9f 90       	pop	r9
    771e:	8f 90       	pop	r8
    7720:	7f 90       	pop	r7
    7722:	6f 90       	pop	r6
    7724:	5f 90       	pop	r5
    7726:	4f 90       	pop	r4
    7728:	08 95       	ret

0000772a <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
    772a:	90 91 b6 01 	lds	r25, 0x01B6
    772e:	89 2f       	mov	r24, r25
    7730:	8f 77       	andi	r24, 0x7F	; 127
    7732:	81 32       	cpi	r24, 0x21	; 33
    7734:	49 f5       	brne	.+82     	; 0x7788 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
    7736:	80 91 b7 01 	lds	r24, 0x01B7
    773a:	80 32       	cpi	r24, 0x20	; 32
    773c:	a1 f0       	breq	.+40     	; 0x7766 <EVENT_USB_Device_ControlRequest+0x3c>
    773e:	81 32       	cpi	r24, 0x21	; 33
    7740:	19 f5       	brne	.+70     	; 0x7788 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    7742:	91 3a       	cpi	r25, 0xA1	; 161
    7744:	09 f5       	brne	.+66     	; 0x7788 <EVENT_USB_Device_ControlRequest+0x5e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7746:	80 91 e8 00 	lds	r24, 0x00E8
    774a:	87 7f       	andi	r24, 0xF7	; 247
    774c:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7750:	8d e0       	ldi	r24, 0x0D	; 13
    7752:	91 e0       	ldi	r25, 0x01	; 1
    7754:	67 e0       	ldi	r22, 0x07	; 7
    7756:	70 e0       	ldi	r23, 0x00	; 0
    7758:	e3 d1       	rcall	.+966    	; 0x7b20 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    775a:	80 91 e8 00 	lds	r24, 0x00E8
    775e:	8b 77       	andi	r24, 0x7B	; 123
    7760:	80 93 e8 00 	sts	0x00E8, r24
    7764:	08 95       	ret
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    7766:	91 32       	cpi	r25, 0x21	; 33
    7768:	79 f4       	brne	.+30     	; 0x7788 <EVENT_USB_Device_ControlRequest+0x5e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    776a:	80 91 e8 00 	lds	r24, 0x00E8
    776e:	87 7f       	andi	r24, 0xF7	; 247
    7770:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    7774:	8d e0       	ldi	r24, 0x0D	; 13
    7776:	91 e0       	ldi	r25, 0x01	; 1
    7778:	67 e0       	ldi	r22, 0x07	; 7
    777a:	70 e0       	ldi	r23, 0x00	; 0
    777c:	35 d2       	rcall	.+1130   	; 0x7be8 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    777e:	80 91 e8 00 	lds	r24, 0x00E8
    7782:	8e 77       	andi	r24, 0x7E	; 126
    7784:	80 93 e8 00 	sts	0x00E8, r24
    7788:	08 95       	ret

0000778a <EVENT_USB_Device_ConfigurationChanged>:
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    778a:	82 e0       	ldi	r24, 0x02	; 2
    778c:	61 ec       	ldi	r22, 0xC1	; 193
    778e:	42 e0       	ldi	r20, 0x02	; 2
    7790:	8f d0       	rcall	.+286    	; 0x78b0 <Endpoint_ConfigureEndpoint_Prv>
	                           ENDPOINT_BANK_SINGLE);

	Endpoint_ConfigureEndpoint(CDC_RX_EPNUM, EP_TYPE_BULK,
	                           ENDPOINT_DIR_OUT, CDC_TXRX_EPSIZE,
	                           ENDPOINT_BANK_SINGLE);
}
    7792:	83 e0       	ldi	r24, 0x03	; 3
    7794:	61 e8       	ldi	r22, 0x81	; 129
    7796:	42 e1       	ldi	r20, 0x12	; 18
    7798:	8b d0       	rcall	.+278    	; 0x78b0 <Endpoint_ConfigureEndpoint_Prv>
    779a:	84 e0       	ldi	r24, 0x04	; 4
    779c:	60 e8       	ldi	r22, 0x80	; 128
    779e:	42 e1       	ldi	r20, 0x12	; 18
    77a0:	87 c0       	rjmp	.+270    	; 0x78b0 <Endpoint_ConfigureEndpoint_Prv>

000077a2 <SetupHardware>:

/** Configures all hardware required for the bootloader. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    77a2:	84 b7       	in	r24, 0x34	; 52
    77a4:	87 7f       	andi	r24, 0xF7	; 247
    77a6:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    77a8:	88 e1       	ldi	r24, 0x18	; 24
    77aa:	0f b6       	in	r0, 0x3f	; 63
    77ac:	f8 94       	cli
    77ae:	80 93 60 00 	sts	0x0060, r24
    77b2:	10 92 60 00 	sts	0x0060, r1
    77b6:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
    77b8:	20 e8       	ldi	r18, 0x80	; 128
    77ba:	80 e0       	ldi	r24, 0x00	; 0
    77bc:	90 e0       	ldi	r25, 0x00	; 0
    77be:	0f b6       	in	r0, 0x3f	; 63
    77c0:	f8 94       	cli
    77c2:	20 93 61 00 	sts	0x0061, r18
    77c6:	80 93 61 00 	sts	0x0061, r24
    77ca:	0f be       	out	0x3f, r0	; 63

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
    77cc:	81 e0       	ldi	r24, 0x01	; 1
    77ce:	85 bf       	out	0x35, r24	; 53
	MCUCR = (1 << IVSEL);
    77d0:	92 e0       	ldi	r25, 0x02	; 2
    77d2:	95 bf       	out	0x35, r25	; 53
	
	LED_SETUP();
    77d4:	3f 9a       	sbi	0x07, 7	; 7
    77d6:	20 9a       	sbi	0x04, 0	; 4
    77d8:	55 9a       	sbi	0x0a, 5	; 10
	CPU_PRESCALE(0); 
    77da:	e1 e6       	ldi	r30, 0x61	; 97
    77dc:	f0 e0       	ldi	r31, 0x00	; 0
    77de:	20 83       	st	Z, r18
    77e0:	10 82       	st	Z, r1
	L_LED_OFF();
    77e2:	47 98       	cbi	0x08, 7	; 8
	TX_LED_OFF();
    77e4:	5d 98       	cbi	0x0b, 5	; 11
	RX_LED_OFF();
    77e6:	28 98       	cbi	0x05, 0	; 5
	 * With 16 MHz clock and 1/64 prescaler, timer 1 is clocked at 250 kHz
	 * Our chosen compare match generates an interrupt every 1 ms.
	 * This interrupt is disabled selectively when doing memory reading, erasing,
	 * or writing since SPM has tight timing requirements.
	 */ 
	OCR1AH = 0;
    77e8:	10 92 89 00 	sts	0x0089, r1
	OCR1AL = 250;
    77ec:	8a ef       	ldi	r24, 0xFA	; 250
    77ee:	80 93 88 00 	sts	0x0088, r24
	TIMSK1 = (1 << OCIE1A);					// enable timer 1 output compare A match interrupt
    77f2:	90 93 6f 00 	sts	0x006F, r25
	TCCR1B = ((1 << CS11) | (1 << CS10));	// 1/64 prescaler on timer 1 input
    77f6:	83 e0       	ldi	r24, 0x03	; 3
    77f8:	80 93 81 00 	sts	0x0081, r24

	/* Initialize USB Subsystem */
	USB_Init();
}
    77fc:	ca c0       	rjmp	.+404    	; 0x7992 <USB_Init>

000077fe <main>:
 *  runs the bootloader processing routine until it times out or is instructed to exit.
 */
int main(void)
{
	/* Save the value of the boot key memory before it is overwritten */
	uint16_t bootKeyPtrVal = *bootKeyPtr;
    77fe:	80 91 00 08 	lds	r24, 0x0800
    7802:	90 91 01 08 	lds	r25, 0x0801
	*bootKeyPtr = 0;
    7806:	10 92 01 08 	sts	0x0801, r1
    780a:	10 92 00 08 	sts	0x0800, r1

	/* Check the reason for the reset so we can act accordingly */
	uint8_t  mcusr_state = MCUSR;		// store the initial state of the Status register
    780e:	84 b7       	in	r24, 0x34	; 52
	MCUSR = 0;							// clear all reset flags	
    7810:	14 be       	out	0x34, r1	; 52

	/* Watchdog may be configured with a 15 ms period so must disable it before going any further */
	wdt_disable();
    7812:	88 e1       	ldi	r24, 0x18	; 24
    7814:	0f b6       	in	r0, 0x3f	; 63
    7816:	f8 94       	cli
    7818:	80 93 60 00 	sts	0x0060, r24
    781c:	10 92 60 00 	sts	0x0060, r1
    7820:	0f be       	out	0x3f, r0	; 63
	
	
	DDRB = 0b000010000; 
    7822:	80 e1       	ldi	r24, 0x10	; 16
    7824:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b000010000;
    7826:	85 b9       	out	0x05, r24	; 5

	if ((PINB & 0b000010000)) {		
    7828:	1c 9b       	sbis	0x03, 4	; 3
    782a:	01 c0       	rjmp	.+2      	; 0x782e <main+0x30>
		// After a power-on reset skip the bootloader and jump straight to sketch 
		// if one exists.	
		StartSketch();
    782c:	5b dc       	rcall	.-1866   	; 0x70e4 <StartSketch>
	}
	
	/* Setup hardware required for the bootloader */
	SetupHardware();
    782e:	b9 df       	rcall	.-142    	; 0x77a2 <SetupHardware>

	/* Enable global interrupts so that the USB stack can function */
	sei();
    7830:	78 94       	sei
	
	Timeout = 0;
    7832:	10 92 ad 01 	sts	0x01AD, r1
    7836:	10 92 ac 01 	sts	0x01AC, r1
	
	while (1)
	{
		CDC_Task();
    783a:	f8 dc       	rcall	.-1552   	; 0x722c <CDC_Task>
		USB_USBTask();
    783c:	28 d3       	rcall	.+1616   	; 0x7e8e <USB_USBTask>
		/* Time out and start the sketch if one is present */
		if (Timeout > TIMEOUT_PERIOD)
    783e:	80 91 ac 01 	lds	r24, 0x01AC
    7842:	90 91 ad 01 	lds	r25, 0x01AD
    7846:	81 54       	subi	r24, 0x41	; 65
    7848:	9f 41       	sbci	r25, 0x1F	; 31
    784a:	10 f0       	brcs	.+4      	; 0x7850 <main+0x52>
			RunBootloader = false;
    784c:	10 92 14 01 	sts	0x0114, r1

		LEDPulse();
    7850:	5b dc       	rcall	.-1866   	; 0x7108 <LEDPulse>
    7852:	f3 cf       	rjmp	.-26     	; 0x783a <main+0x3c>

00007854 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    7854:	fa 01       	movw	r30, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    7856:	92 30       	cpi	r25, 0x02	; 2
    7858:	49 f0       	breq	.+18     	; 0x786c <CALLBACK_USB_GetDescriptor+0x18>
    785a:	93 30       	cpi	r25, 0x03	; 3
    785c:	61 f0       	breq	.+24     	; 0x7876 <CALLBACK_USB_GetDescriptor+0x22>
    785e:	91 30       	cpi	r25, 0x01	; 1
    7860:	f9 f4       	brne	.+62     	; 0x78a0 <CALLBACK_USB_GetDescriptor+0x4c>
    7862:	85 e1       	ldi	r24, 0x15	; 21
    7864:	91 e0       	ldi	r25, 0x01	; 1
    7866:	22 e1       	ldi	r18, 0x12	; 18
    7868:	30 e0       	ldi	r19, 0x00	; 0
    786a:	1e c0       	rjmp	.+60     	; 0x78a8 <CALLBACK_USB_GetDescriptor+0x54>
    786c:	87 e2       	ldi	r24, 0x27	; 39
    786e:	91 e0       	ldi	r25, 0x01	; 1
    7870:	2e e3       	ldi	r18, 0x3E	; 62
    7872:	30 e0       	ldi	r19, 0x00	; 0
    7874:	19 c0       	rjmp	.+50     	; 0x78a8 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
    7876:	88 23       	and	r24, r24
    7878:	29 f4       	brne	.+10     	; 0x7884 <CALLBACK_USB_GetDescriptor+0x30>
    787a:	85 e6       	ldi	r24, 0x65	; 101
    787c:	91 e0       	ldi	r25, 0x01	; 1
    787e:	24 e0       	ldi	r18, 0x04	; 4
    7880:	30 e0       	ldi	r19, 0x00	; 0
    7882:	12 c0       	rjmp	.+36     	; 0x78a8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == DeviceDescriptor.ProductStrIndex) 
    7884:	81 30       	cpi	r24, 0x01	; 1
    7886:	29 f4       	brne	.+10     	; 0x7892 <CALLBACK_USB_GetDescriptor+0x3e>
    7888:	89 e6       	ldi	r24, 0x69	; 105
    788a:	91 e0       	ldi	r25, 0x01	; 1
    788c:	22 e2       	ldi	r18, 0x22	; 34
    788e:	30 e0       	ldi	r19, 0x00	; 0
    7890:	0b c0       	rjmp	.+22     	; 0x78a8 <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
			} else if (DescriptorNumber == DeviceDescriptor.ManufacturerStrIndex)
    7892:	82 30       	cpi	r24, 0x02	; 2
    7894:	29 f4       	brne	.+10     	; 0x78a0 <CALLBACK_USB_GetDescriptor+0x4c>
    7896:	8d e8       	ldi	r24, 0x8D	; 141
    7898:	91 e0       	ldi	r25, 0x01	; 1
    789a:	28 e1       	ldi	r18, 0x18	; 24
    789c:	30 e0       	ldi	r19, 0x00	; 0
    789e:	04 c0       	rjmp	.+8      	; 0x78a8 <CALLBACK_USB_GetDescriptor+0x54>
    78a0:	80 e0       	ldi	r24, 0x00	; 0
    78a2:	90 e0       	ldi	r25, 0x00	; 0
    78a4:	20 e0       	ldi	r18, 0x00	; 0
    78a6:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    78a8:	91 83       	std	Z+1, r25	; 0x01
    78aa:	80 83       	st	Z, r24
	return Size;
}
    78ac:	c9 01       	movw	r24, r18
    78ae:	08 95       	ret

000078b0 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    78b0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    78b4:	80 91 eb 00 	lds	r24, 0x00EB
    78b8:	81 60       	ori	r24, 0x01	; 1
    78ba:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    78be:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
    78c2:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    78c6:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    78ca:	80 91 ee 00 	lds	r24, 0x00EE
	}
	
	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    78ce:	88 1f       	adc	r24, r24
    78d0:	88 27       	eor	r24, r24
    78d2:	88 1f       	adc	r24, r24
    78d4:	08 95       	ret

000078d6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    78d6:	80 91 b6 01 	lds	r24, 0x01B6
    78da:	88 23       	and	r24, r24
    78dc:	8c f4       	brge	.+34     	; 0x7900 <Endpoint_ClearStatusStage+0x2a>
    78de:	03 c0       	rjmp	.+6      	; 0x78e6 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78e0:	8e b3       	in	r24, 0x1e	; 30
    78e2:	88 23       	and	r24, r24
    78e4:	b1 f0       	breq	.+44     	; 0x7912 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    78e6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    78ea:	82 ff       	sbrs	r24, 2
    78ec:	f9 cf       	rjmp	.-14     	; 0x78e0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    78ee:	80 91 e8 00 	lds	r24, 0x00E8
    78f2:	8b 77       	andi	r24, 0x7B	; 123
    78f4:	80 93 e8 00 	sts	0x00E8, r24
    78f8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    78fa:	8e b3       	in	r24, 0x1e	; 30
    78fc:	88 23       	and	r24, r24
    78fe:	49 f0       	breq	.+18     	; 0x7912 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7900:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    7904:	80 ff       	sbrs	r24, 0
    7906:	f9 cf       	rjmp	.-14     	; 0x78fa <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7908:	80 91 e8 00 	lds	r24, 0x00E8
    790c:	8e 77       	andi	r24, 0x7E	; 126
    790e:	80 93 e8 00 	sts	0x00E8, r24
    7912:	08 95       	ret

00007914 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    7914:	ef 92       	push	r14
    7916:	ff 92       	push	r15
    7918:	0f 93       	push	r16
    791a:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    791c:	45 d0       	rcall	.+138    	; 0x79a8 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    791e:	4c d0       	rcall	.+152    	; 0x79b8 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    7920:	08 ed       	ldi	r16, 0xD8	; 216
    7922:	10 e0       	ldi	r17, 0x00	; 0
    7924:	f8 01       	movw	r30, r16
    7926:	80 81       	ld	r24, Z
    7928:	8f 77       	andi	r24, 0x7F	; 127
    792a:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
    792c:	80 81       	ld	r24, Z
    792e:	80 68       	ori	r24, 0x80	; 128
    7930:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7932:	80 81       	ld	r24, Z
    7934:	8f 7d       	andi	r24, 0xDF	; 223
    7936:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7938:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    793a:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    793c:	10 92 b4 01 	sts	0x01B4, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    7940:	80 ee       	ldi	r24, 0xE0	; 224
    7942:	e8 2e       	mov	r14, r24
    7944:	f1 2c       	mov	r15, r1
    7946:	f7 01       	movw	r30, r14
    7948:	80 81       	ld	r24, Z
    794a:	8b 7f       	andi	r24, 0xFB	; 251
    794c:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    794e:	f8 01       	movw	r30, r16
    7950:	80 81       	ld	r24, Z
    7952:	81 60       	ori	r24, 0x01	; 1
    7954:	80 83       	st	Z, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7956:	80 e0       	ldi	r24, 0x00	; 0
    7958:	60 e0       	ldi	r22, 0x00	; 0
    795a:	42 e0       	ldi	r20, 0x02	; 2
    795c:	a9 df       	rcall	.-174    	; 0x78b0 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    795e:	e1 ee       	ldi	r30, 0xE1	; 225
    7960:	f0 e0       	ldi	r31, 0x00	; 0
    7962:	80 81       	ld	r24, Z
    7964:	8e 7f       	andi	r24, 0xFE	; 254
    7966:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7968:	e2 ee       	ldi	r30, 0xE2	; 226
    796a:	f0 e0       	ldi	r31, 0x00	; 0
    796c:	80 81       	ld	r24, Z
    796e:	81 60       	ori	r24, 0x01	; 1
    7970:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    7972:	80 81       	ld	r24, Z
    7974:	88 60       	ori	r24, 0x08	; 8
    7976:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    7978:	f7 01       	movw	r30, r14
    797a:	80 81       	ld	r24, Z
    797c:	8e 7f       	andi	r24, 0xFE	; 254
    797e:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON  |=  (1 << OTGPADE);
    7980:	f8 01       	movw	r30, r16
    7982:	80 81       	ld	r24, Z
    7984:	80 61       	ori	r24, 0x10	; 16
    7986:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    7988:	1f 91       	pop	r17
    798a:	0f 91       	pop	r16
    798c:	ff 90       	pop	r15
    798e:	ef 90       	pop	r14
    7990:	08 95       	ret

00007992 <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
    7992:	e7 ed       	ldi	r30, 0xD7	; 215
    7994:	f0 e0       	ldi	r31, 0x00	; 0
    7996:	80 81       	ld	r24, Z
    7998:	81 60       	ori	r24, 0x01	; 1
    799a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    799c:	8a e4       	ldi	r24, 0x4A	; 74
    799e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    79a0:	81 e0       	ldi	r24, 0x01	; 1
    79a2:	80 93 b5 01 	sts	0x01B5, r24

	USB_ResetInterface();
}
    79a6:	b6 cf       	rjmp	.-148    	; 0x7914 <USB_ResetInterface>

000079a8 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    79a8:	e8 ed       	ldi	r30, 0xD8	; 216
    79aa:	f0 e0       	ldi	r31, 0x00	; 0
    79ac:	80 81       	ld	r24, Z
    79ae:	8e 7f       	andi	r24, 0xFE	; 254
    79b0:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    79b2:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    79b6:	08 95       	ret

000079b8 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    79b8:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    79bc:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    79c0:	08 95       	ret

000079c2 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    79c2:	1f 92       	push	r1
    79c4:	0f 92       	push	r0
    79c6:	0f b6       	in	r0, 0x3f	; 63
    79c8:	0f 92       	push	r0
    79ca:	11 24       	eor	r1, r1
    79cc:	2f 93       	push	r18
    79ce:	3f 93       	push	r19
    79d0:	4f 93       	push	r20
    79d2:	5f 93       	push	r21
    79d4:	6f 93       	push	r22
    79d6:	7f 93       	push	r23
    79d8:	8f 93       	push	r24
    79da:	9f 93       	push	r25
    79dc:	af 93       	push	r26
    79de:	bf 93       	push	r27
    79e0:	ef 93       	push	r30
    79e2:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    79e4:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    79e8:	80 ff       	sbrs	r24, 0
    79ea:	1a c0       	rjmp	.+52     	; 0x7a20 <__vector_10+0x5e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    79ec:	80 91 d8 00 	lds	r24, 0x00D8
    79f0:	80 ff       	sbrs	r24, 0
    79f2:	16 c0       	rjmp	.+44     	; 0x7a20 <__vector_10+0x5e>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    79f4:	80 91 da 00 	lds	r24, 0x00DA
    79f8:	8e 7f       	andi	r24, 0xFE	; 254
    79fa:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    79fe:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    7a02:	80 ff       	sbrs	r24, 0
    7a04:	0a c0       	rjmp	.+20     	; 0x7a1a <__vector_10+0x58>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a06:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a08:	82 e0       	ldi	r24, 0x02	; 2
    7a0a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    7a0c:	09 b4       	in	r0, 0x29	; 41
    7a0e:	00 fe       	sbrs	r0, 0
    7a10:	fd cf       	rjmp	.-6      	; 0x7a0c <__vector_10+0x4a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    7a12:	81 e0       	ldi	r24, 0x01	; 1
    7a14:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    7a16:	3a d2       	rcall	.+1140   	; 0x7e8c <USB_Event_Stub>
    7a18:	03 c0       	rjmp	.+6      	; 0x7a20 <__vector_10+0x5e>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a1a:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    7a1c:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    7a1e:	36 d2       	rcall	.+1132   	; 0x7e8c <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    7a20:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    7a24:	80 ff       	sbrs	r24, 0
    7a26:	17 c0       	rjmp	.+46     	; 0x7a56 <__vector_10+0x94>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    7a28:	80 91 e2 00 	lds	r24, 0x00E2
    7a2c:	80 ff       	sbrs	r24, 0
    7a2e:	13 c0       	rjmp	.+38     	; 0x7a56 <__vector_10+0x94>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7a30:	80 91 e2 00 	lds	r24, 0x00E2
    7a34:	8e 7f       	andi	r24, 0xFE	; 254
    7a36:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7a3a:	80 91 e2 00 	lds	r24, 0x00E2
    7a3e:	80 61       	ori	r24, 0x10	; 16
    7a40:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
    7a44:	80 91 d8 00 	lds	r24, 0x00D8
    7a48:	80 62       	ori	r24, 0x20	; 32
    7a4a:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    7a4e:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    7a50:	85 e0       	ldi	r24, 0x05	; 5
    7a52:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    7a54:	1b d2       	rcall	.+1078   	; 0x7e8c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    7a56:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    7a5a:	84 ff       	sbrs	r24, 4
    7a5c:	2b c0       	rjmp	.+86     	; 0x7ab4 <__vector_10+0xf2>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    7a5e:	80 91 e2 00 	lds	r24, 0x00E2
    7a62:	84 ff       	sbrs	r24, 4
    7a64:	27 c0       	rjmp	.+78     	; 0x7ab4 <__vector_10+0xf2>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    7a66:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    7a68:	82 e0       	ldi	r24, 0x02	; 2
    7a6a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    7a6c:	09 b4       	in	r0, 0x29	; 41
    7a6e:	00 fe       	sbrs	r0, 0
    7a70:	fd cf       	rjmp	.-6      	; 0x7a6c <__vector_10+0xaa>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
    7a72:	80 91 d8 00 	lds	r24, 0x00D8
    7a76:	8f 7d       	andi	r24, 0xDF	; 223
    7a78:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    7a7c:	80 91 e1 00 	lds	r24, 0x00E1
    7a80:	8f 7e       	andi	r24, 0xEF	; 239
    7a82:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    7a86:	80 91 e2 00 	lds	r24, 0x00E2
    7a8a:	8f 7e       	andi	r24, 0xEF	; 239
    7a8c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    7a90:	80 91 e2 00 	lds	r24, 0x00E2
    7a94:	81 60       	ori	r24, 0x01	; 1
    7a96:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    7a9a:	80 91 b4 01 	lds	r24, 0x01B4
    7a9e:	88 23       	and	r24, r24
    7aa0:	31 f4       	brne	.+12     	; 0x7aae <__vector_10+0xec>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7aa2:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7aa6:	87 fd       	sbrc	r24, 7
    7aa8:	02 c0       	rjmp	.+4      	; 0x7aae <__vector_10+0xec>
    7aaa:	81 e0       	ldi	r24, 0x01	; 1
    7aac:	01 c0       	rjmp	.+2      	; 0x7ab0 <__vector_10+0xee>
    7aae:	84 e0       	ldi	r24, 0x04	; 4
    7ab0:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    7ab2:	ec d1       	rcall	.+984    	; 0x7e8c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    7ab4:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    7ab8:	83 ff       	sbrs	r24, 3
    7aba:	21 c0       	rjmp	.+66     	; 0x7afe <__vector_10+0x13c>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    7abc:	80 91 e2 00 	lds	r24, 0x00E2
    7ac0:	83 ff       	sbrs	r24, 3
    7ac2:	1d c0       	rjmp	.+58     	; 0x7afe <__vector_10+0x13c>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    7ac4:	80 91 e1 00 	lds	r24, 0x00E1
    7ac8:	87 7f       	andi	r24, 0xF7	; 247
    7aca:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    7ace:	82 e0       	ldi	r24, 0x02	; 2
    7ad0:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    7ad2:	10 92 b4 01 	sts	0x01B4, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    7ad6:	80 91 e1 00 	lds	r24, 0x00E1
    7ada:	8e 7f       	andi	r24, 0xFE	; 254
    7adc:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    7ae0:	80 91 e2 00 	lds	r24, 0x00E2
    7ae4:	8e 7f       	andi	r24, 0xFE	; 254
    7ae6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    7aea:	80 91 e2 00 	lds	r24, 0x00E2
    7aee:	80 61       	ori	r24, 0x10	; 16
    7af0:	80 93 e2 00 	sts	0x00E2, r24
			                                              const uint8_t Type,
			                                              const uint8_t Direction,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, ((Type << EPTYPE0) | (Direction ? (1 << EPDIR) : 0)),
    7af4:	80 e0       	ldi	r24, 0x00	; 0
    7af6:	60 e0       	ldi	r22, 0x00	; 0
    7af8:	42 e0       	ldi	r20, 0x02	; 2
    7afa:	da de       	rcall	.-588    	; 0x78b0 <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    7afc:	c7 d1       	rcall	.+910    	; 0x7e8c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    7afe:	ff 91       	pop	r31
    7b00:	ef 91       	pop	r30
    7b02:	bf 91       	pop	r27
    7b04:	af 91       	pop	r26
    7b06:	9f 91       	pop	r25
    7b08:	8f 91       	pop	r24
    7b0a:	7f 91       	pop	r23
    7b0c:	6f 91       	pop	r22
    7b0e:	5f 91       	pop	r21
    7b10:	4f 91       	pop	r20
    7b12:	3f 91       	pop	r19
    7b14:	2f 91       	pop	r18
    7b16:	0f 90       	pop	r0
    7b18:	0f be       	out	0x3f, r0	; 63
    7b1a:	0f 90       	pop	r0
    7b1c:	1f 90       	pop	r1
    7b1e:	18 95       	reti

00007b20 <Endpoint_Write_Control_Stream_LE>:
    7b20:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7b22:	40 91 bc 01 	lds	r20, 0x01BC
    7b26:	50 91 bd 01 	lds	r21, 0x01BD
    7b2a:	46 17       	cp	r20, r22
    7b2c:	57 07       	cpc	r21, r23
    7b2e:	18 f4       	brcc	.+6      	; 0x7b36 <Endpoint_Write_Control_Stream_LE+0x16>
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7b30:	f9 01       	movw	r30, r18
    7b32:	90 e0       	ldi	r25, 0x00	; 0
    7b34:	44 c0       	rjmp	.+136    	; 0x7bbe <Endpoint_Write_Control_Stream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7b36:	61 15       	cp	r22, r1
    7b38:	71 05       	cpc	r23, r1
    7b3a:	11 f0       	breq	.+4      	; 0x7b40 <Endpoint_Write_Control_Stream_LE+0x20>
    7b3c:	ab 01       	movw	r20, r22
    7b3e:	f8 cf       	rjmp	.-16     	; 0x7b30 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7b40:	80 91 e8 00 	lds	r24, 0x00E8
    7b44:	8e 77       	andi	r24, 0x7E	; 126
    7b46:	80 93 e8 00 	sts	0x00E8, r24
    7b4a:	40 e0       	ldi	r20, 0x00	; 0
    7b4c:	50 e0       	ldi	r21, 0x00	; 0
    7b4e:	f0 cf       	rjmp	.-32     	; 0x7b30 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7b50:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7b52:	88 23       	and	r24, r24
    7b54:	09 f4       	brne	.+2      	; 0x7b58 <Endpoint_Write_Control_Stream_LE+0x38>
    7b56:	44 c0       	rjmp	.+136    	; 0x7be0 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7b58:	85 30       	cpi	r24, 0x05	; 5
    7b5a:	09 f4       	brne	.+2      	; 0x7b5e <Endpoint_Write_Control_Stream_LE+0x3e>
    7b5c:	43 c0       	rjmp	.+134    	; 0x7be4 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7b5e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7b62:	83 ff       	sbrs	r24, 3
    7b64:	02 c0       	rjmp	.+4      	; 0x7b6a <Endpoint_Write_Control_Stream_LE+0x4a>
    7b66:	81 e0       	ldi	r24, 0x01	; 1
    7b68:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7b6a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7b6e:	82 fd       	sbrc	r24, 2
    7b70:	31 c0       	rjmp	.+98     	; 0x7bd4 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7b72:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7b76:	80 ff       	sbrs	r24, 0
    7b78:	22 c0       	rjmp	.+68     	; 0x7bbe <Endpoint_Write_Control_Stream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7b7a:	80 91 f3 00 	lds	r24, 0x00F3
    7b7e:	90 91 f2 00 	lds	r25, 0x00F2
    7b82:	78 2f       	mov	r23, r24
    7b84:	60 e0       	ldi	r22, 0x00	; 0
    7b86:	29 2f       	mov	r18, r25
    7b88:	30 e0       	ldi	r19, 0x00	; 0
    7b8a:	26 2b       	or	r18, r22
    7b8c:	37 2b       	or	r19, r23
    7b8e:	07 c0       	rjmp	.+14     	; 0x7b9e <Endpoint_Write_Control_Stream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7b90:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7b92:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7b96:	41 50       	subi	r20, 0x01	; 1
    7b98:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
    7b9a:	2f 5f       	subi	r18, 0xFF	; 255
    7b9c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7b9e:	41 15       	cp	r20, r1
    7ba0:	51 05       	cpc	r21, r1
    7ba2:	19 f0       	breq	.+6      	; 0x7baa <Endpoint_Write_Control_Stream_LE+0x8a>
    7ba4:	28 30       	cpi	r18, 0x08	; 8
    7ba6:	31 05       	cpc	r19, r1
    7ba8:	98 f3       	brcs	.-26     	; 0x7b90 <Endpoint_Write_Control_Stream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    7baa:	90 e0       	ldi	r25, 0x00	; 0
    7bac:	28 30       	cpi	r18, 0x08	; 8
    7bae:	31 05       	cpc	r19, r1
    7bb0:	09 f4       	brne	.+2      	; 0x7bb4 <Endpoint_Write_Control_Stream_LE+0x94>
    7bb2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7bb4:	80 91 e8 00 	lds	r24, 0x00E8
    7bb8:	8e 77       	andi	r24, 0x7E	; 126
    7bba:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    7bbe:	41 15       	cp	r20, r1
    7bc0:	51 05       	cpc	r21, r1
    7bc2:	31 f6       	brne	.-116    	; 0x7b50 <Endpoint_Write_Control_Stream_LE+0x30>
    7bc4:	99 23       	and	r25, r25
    7bc6:	21 f6       	brne	.-120    	; 0x7b50 <Endpoint_Write_Control_Stream_LE+0x30>
    7bc8:	05 c0       	rjmp	.+10     	; 0x7bd4 <Endpoint_Write_Control_Stream_LE+0xb4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bca:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7bcc:	88 23       	and	r24, r24
    7bce:	41 f0       	breq	.+16     	; 0x7be0 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7bd0:	85 30       	cpi	r24, 0x05	; 5
    7bd2:	41 f0       	breq	.+16     	; 0x7be4 <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7bd4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    7bd8:	82 ff       	sbrs	r24, 2
    7bda:	f7 cf       	rjmp	.-18     	; 0x7bca <Endpoint_Write_Control_Stream_LE+0xaa>
    7bdc:	80 e0       	ldi	r24, 0x00	; 0
    7bde:	08 95       	ret
    7be0:	82 e0       	ldi	r24, 0x02	; 2
    7be2:	08 95       	ret
    7be4:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7be6:	08 95       	ret

00007be8 <Endpoint_Read_Control_Stream_LE>:

#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    7be8:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    7bea:	61 15       	cp	r22, r1
    7bec:	71 05       	cpc	r23, r1
    7bee:	29 f4       	brne	.+10     	; 0x7bfa <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7bf0:	80 91 e8 00 	lds	r24, 0x00E8
    7bf4:	8b 77       	andi	r24, 0x7B	; 123
    7bf6:	80 93 e8 00 	sts	0x00E8, r24
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7bfa:	f9 01       	movw	r30, r18
    7bfc:	26 c0       	rjmp	.+76     	; 0x7c4a <Endpoint_Read_Control_Stream_LE+0x62>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7bfe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c00:	88 23       	and	r24, r24
    7c02:	91 f1       	breq	.+100    	; 0x7c68 <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c04:	85 30       	cpi	r24, 0x05	; 5
    7c06:	91 f1       	breq	.+100    	; 0x7c6c <Endpoint_Read_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c08:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7c0c:	83 ff       	sbrs	r24, 3
    7c0e:	02 c0       	rjmp	.+4      	; 0x7c14 <Endpoint_Read_Control_Stream_LE+0x2c>
    7c10:	81 e0       	ldi	r24, 0x01	; 1
    7c12:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    7c14:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    7c18:	82 ff       	sbrs	r24, 2
    7c1a:	f1 cf       	rjmp	.-30     	; 0x7bfe <Endpoint_Read_Control_Stream_LE+0x16>
    7c1c:	06 c0       	rjmp	.+12     	; 0x7c2a <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c1e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7c22:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    7c24:	61 50       	subi	r22, 0x01	; 1
    7c26:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    7c28:	59 f0       	breq	.+22     	; 0x7c40 <Endpoint_Read_Control_Stream_LE+0x58>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    7c2a:	20 91 f3 00 	lds	r18, 0x00F3
    7c2e:	80 91 f2 00 	lds	r24, 0x00F2
    7c32:	32 2f       	mov	r19, r18
    7c34:	20 e0       	ldi	r18, 0x00	; 0
    7c36:	90 e0       	ldi	r25, 0x00	; 0
    7c38:	82 2b       	or	r24, r18
    7c3a:	93 2b       	or	r25, r19
    7c3c:	89 2b       	or	r24, r25
    7c3e:	79 f7       	brne	.-34     	; 0x7c1e <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7c40:	80 91 e8 00 	lds	r24, 0x00E8
    7c44:	8b 77       	andi	r24, 0x7B	; 123
    7c46:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    7c4a:	61 15       	cp	r22, r1
    7c4c:	71 05       	cpc	r23, r1
    7c4e:	b9 f6       	brne	.-82     	; 0x7bfe <Endpoint_Read_Control_Stream_LE+0x16>
    7c50:	05 c0       	rjmp	.+10     	; 0x7c5c <Endpoint_Read_Control_Stream_LE+0x74>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7c52:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7c54:	88 23       	and	r24, r24
    7c56:	41 f0       	breq	.+16     	; 0x7c68 <Endpoint_Read_Control_Stream_LE+0x80>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    7c58:	85 30       	cpi	r24, 0x05	; 5
    7c5a:	41 f0       	breq	.+16     	; 0x7c6c <Endpoint_Read_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7c5c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    7c60:	80 ff       	sbrs	r24, 0
    7c62:	f7 cf       	rjmp	.-18     	; 0x7c52 <Endpoint_Read_Control_Stream_LE+0x6a>
    7c64:	80 e0       	ldi	r24, 0x00	; 0
    7c66:	08 95       	ret
    7c68:	82 e0       	ldi	r24, 0x02	; 2
    7c6a:	08 95       	ret
    7c6c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    7c6e:	08 95       	ret

00007c70 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    7c70:	0f 93       	push	r16
    7c72:	1f 93       	push	r17
    7c74:	df 93       	push	r29
    7c76:	cf 93       	push	r28
    7c78:	00 d0       	rcall	.+0      	; 0x7c7a <USB_Device_ProcessControlRequest+0xa>
    7c7a:	cd b7       	in	r28, 0x3d	; 61
    7c7c:	de b7       	in	r29, 0x3e	; 62
    7c7e:	e6 eb       	ldi	r30, 0xB6	; 182
    7c80:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    7c82:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    7c86:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    7c88:	81 e0       	ldi	r24, 0x01	; 1
    7c8a:	ee 3b       	cpi	r30, 0xBE	; 190
    7c8c:	f8 07       	cpc	r31, r24
    7c8e:	c9 f7       	brne	.-14     	; 0x7c82 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    7c90:	4c dd       	rcall	.-1384   	; 0x772a <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7c92:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    7c96:	83 ff       	sbrs	r24, 3
    7c98:	e4 c0       	rjmp	.+456    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    7c9a:	80 91 b6 01 	lds	r24, 0x01B6

		switch (USB_ControlRequest.bRequest)
    7c9e:	90 91 b7 01 	lds	r25, 0x01B7
    7ca2:	95 30       	cpi	r25, 0x05	; 5
    7ca4:	09 f4       	brne	.+2      	; 0x7ca8 <USB_Device_ProcessControlRequest+0x38>
    7ca6:	6d c0       	rjmp	.+218    	; 0x7d82 <USB_Device_ProcessControlRequest+0x112>
    7ca8:	96 30       	cpi	r25, 0x06	; 6
    7caa:	40 f4       	brcc	.+16     	; 0x7cbc <USB_Device_ProcessControlRequest+0x4c>
    7cac:	91 30       	cpi	r25, 0x01	; 1
    7cae:	81 f1       	breq	.+96     	; 0x7d10 <USB_Device_ProcessControlRequest+0xa0>
    7cb0:	91 30       	cpi	r25, 0x01	; 1
    7cb2:	70 f0       	brcs	.+28     	; 0x7cd0 <USB_Device_ProcessControlRequest+0x60>
    7cb4:	93 30       	cpi	r25, 0x03	; 3
    7cb6:	09 f0       	breq	.+2      	; 0x7cba <USB_Device_ProcessControlRequest+0x4a>
    7cb8:	d4 c0       	rjmp	.+424    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
    7cba:	2a c0       	rjmp	.+84     	; 0x7d10 <USB_Device_ProcessControlRequest+0xa0>
    7cbc:	98 30       	cpi	r25, 0x08	; 8
    7cbe:	09 f4       	brne	.+2      	; 0x7cc2 <USB_Device_ProcessControlRequest+0x52>
    7cc0:	a3 c0       	rjmp	.+326    	; 0x7e08 <USB_Device_ProcessControlRequest+0x198>
    7cc2:	99 30       	cpi	r25, 0x09	; 9
    7cc4:	09 f4       	brne	.+2      	; 0x7cc8 <USB_Device_ProcessControlRequest+0x58>
    7cc6:	b2 c0       	rjmp	.+356    	; 0x7e2c <USB_Device_ProcessControlRequest+0x1bc>
    7cc8:	96 30       	cpi	r25, 0x06	; 6
    7cca:	09 f0       	breq	.+2      	; 0x7cce <USB_Device_ProcessControlRequest+0x5e>
    7ccc:	ca c0       	rjmp	.+404    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
    7cce:	7c c0       	rjmp	.+248    	; 0x7dc8 <USB_Device_ProcessControlRequest+0x158>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7cd0:	80 38       	cpi	r24, 0x80	; 128
    7cd2:	09 f4       	brne	.+2      	; 0x7cd6 <USB_Device_ProcessControlRequest+0x66>
    7cd4:	c6 c0       	rjmp	.+396    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
    7cd6:	82 38       	cpi	r24, 0x82	; 130
    7cd8:	09 f0       	breq	.+2      	; 0x7cdc <USB_Device_ProcessControlRequest+0x6c>
    7cda:	c3 c0       	rjmp	.+390    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
			#endif
			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7cdc:	80 91 ba 01 	lds	r24, 0x01BA
    7ce0:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7ce2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    7ce6:	80 91 eb 00 	lds	r24, 0x00EB
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7cea:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7cee:	20 91 e8 00 	lds	r18, 0x00E8
    7cf2:	27 7f       	andi	r18, 0xF7	; 247
    7cf4:	20 93 e8 00 	sts	0x00E8, r18
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    7cf8:	90 e0       	ldi	r25, 0x00	; 0
    7cfa:	25 e0       	ldi	r18, 0x05	; 5
    7cfc:	96 95       	lsr	r25
    7cfe:	87 95       	ror	r24
    7d00:	2a 95       	dec	r18
    7d02:	e1 f7       	brne	.-8      	; 0x7cfc <USB_Device_ProcessControlRequest+0x8c>
    7d04:	81 70       	andi	r24, 0x01	; 1
    7d06:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    7d0a:	10 92 f1 00 	sts	0x00F1, r1
    7d0e:	87 c0       	rjmp	.+270    	; 0x7e1e <USB_Device_ProcessControlRequest+0x1ae>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7d10:	88 23       	and	r24, r24
    7d12:	19 f0       	breq	.+6      	; 0x7d1a <USB_Device_ProcessControlRequest+0xaa>
    7d14:	82 30       	cpi	r24, 0x02	; 2
    7d16:	09 f0       	breq	.+2      	; 0x7d1a <USB_Device_ProcessControlRequest+0xaa>
    7d18:	a4 c0       	rjmp	.+328    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    7d1a:	8f 71       	andi	r24, 0x1F	; 31
    7d1c:	82 30       	cpi	r24, 0x02	; 2
    7d1e:	09 f0       	breq	.+2      	; 0x7d22 <USB_Device_ProcessControlRequest+0xb2>
    7d20:	a0 c0       	rjmp	.+320    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    7d22:	80 91 b8 01 	lds	r24, 0x01B8
    7d26:	88 23       	and	r24, r24
    7d28:	31 f5       	brne	.+76     	; 0x7d76 <USB_Device_ProcessControlRequest+0x106>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    7d2a:	20 91 ba 01 	lds	r18, 0x01BA
    7d2e:	27 70       	andi	r18, 0x07	; 7

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    7d30:	09 f4       	brne	.+2      	; 0x7d34 <USB_Device_ProcessControlRequest+0xc4>
    7d32:	97 c0       	rjmp	.+302    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d34:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    7d38:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    7d3c:	80 ff       	sbrs	r24, 0
    7d3e:	1b c0       	rjmp	.+54     	; 0x7d76 <USB_Device_ProcessControlRequest+0x106>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    7d40:	93 30       	cpi	r25, 0x03	; 3
    7d42:	21 f4       	brne	.+8      	; 0x7d4c <USB_Device_ProcessControlRequest+0xdc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7d44:	80 91 eb 00 	lds	r24, 0x00EB
    7d48:	80 62       	ori	r24, 0x20	; 32
    7d4a:	13 c0       	rjmp	.+38     	; 0x7d72 <USB_Device_ProcessControlRequest+0x102>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    7d4c:	80 91 eb 00 	lds	r24, 0x00EB
    7d50:	80 61       	ori	r24, 0x10	; 16
    7d52:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
    7d56:	81 e0       	ldi	r24, 0x01	; 1
    7d58:	90 e0       	ldi	r25, 0x00	; 0
    7d5a:	02 c0       	rjmp	.+4      	; 0x7d60 <USB_Device_ProcessControlRequest+0xf0>
    7d5c:	88 0f       	add	r24, r24
    7d5e:	99 1f       	adc	r25, r25
    7d60:	2a 95       	dec	r18
    7d62:	e2 f7       	brpl	.-8      	; 0x7d5c <USB_Device_ProcessControlRequest+0xec>
    7d64:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    7d68:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7d6c:	80 91 eb 00 	lds	r24, 0x00EB
    7d70:	88 60       	ori	r24, 0x08	; 8
    7d72:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7d76:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7d7a:	80 91 e8 00 	lds	r24, 0x00E8
    7d7e:	87 7f       	andi	r24, 0xF7	; 247
    7d80:	51 c0       	rjmp	.+162    	; 0x7e24 <USB_Device_ProcessControlRequest+0x1b4>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7d82:	88 23       	and	r24, r24
    7d84:	09 f0       	breq	.+2      	; 0x7d88 <USB_Device_ProcessControlRequest+0x118>
    7d86:	6d c0       	rjmp	.+218    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7d88:	10 91 b8 01 	lds	r17, 0x01B8
    7d8c:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7d8e:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7d90:	f8 94       	cli
    7d92:	80 91 e8 00 	lds	r24, 0x00E8
    7d96:	87 7f       	andi	r24, 0xF7	; 247
    7d98:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();
				
	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7d9c:	9c dd       	rcall	.-1224   	; 0x78d6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7d9e:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    7da2:	80 ff       	sbrs	r24, 0
    7da4:	fc cf       	rjmp	.-8      	; 0x7d9e <USB_Device_ProcessControlRequest+0x12e>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7da6:	80 91 e3 00 	lds	r24, 0x00E3
    7daa:	80 78       	andi	r24, 0x80	; 128
    7dac:	81 2b       	or	r24, r17

				UDADDR = Temp;
    7dae:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    7db2:	80 68       	ori	r24, 0x80	; 128
    7db4:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7db8:	11 23       	and	r17, r17
    7dba:	11 f4       	brne	.+4      	; 0x7dc0 <USB_Device_ProcessControlRequest+0x150>
    7dbc:	82 e0       	ldi	r24, 0x02	; 2
    7dbe:	01 c0       	rjmp	.+2      	; 0x7dc2 <USB_Device_ProcessControlRequest+0x152>
    7dc0:	83 e0       	ldi	r24, 0x03	; 3
    7dc2:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    7dc4:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;				
				#endif
				
				GCC_MEMORY_BARRIER();
    7dc6:	4d c0       	rjmp	.+154    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7dc8:	80 58       	subi	r24, 0x80	; 128
    7dca:	82 30       	cpi	r24, 0x02	; 2
    7dcc:	08 f0       	brcs	.+2      	; 0x7dd0 <USB_Device_ProcessControlRequest+0x160>
    7dce:	49 c0       	rjmp	.+146    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    7dd0:	80 91 b8 01 	lds	r24, 0x01B8
    7dd4:	90 91 b9 01 	lds	r25, 0x01B9
    7dd8:	60 91 ba 01 	lds	r22, 0x01BA
    7ddc:	ae 01       	movw	r20, r28
    7dde:	4f 5f       	subi	r20, 0xFF	; 255
    7de0:	5f 4f       	sbci	r21, 0xFF	; 255
    7de2:	38 dd       	rcall	.-1424   	; 0x7854 <CALLBACK_USB_GetDescriptor>
    7de4:	bc 01       	movw	r22, r24
    7de6:	00 97       	sbiw	r24, 0x00	; 0
    7de8:	09 f4       	brne	.+2      	; 0x7dec <USB_Device_ProcessControlRequest+0x17c>
    7dea:	3b c0       	rjmp	.+118    	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7dec:	80 91 e8 00 	lds	r24, 0x00E8
    7df0:	87 7f       	andi	r24, 0xF7	; 247
    7df2:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    7df6:	89 81       	ldd	r24, Y+1	; 0x01
    7df8:	9a 81       	ldd	r25, Y+2	; 0x02
    7dfa:	92 de       	rcall	.-732    	; 0x7b20 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    7dfc:	80 91 e8 00 	lds	r24, 0x00E8
    7e00:	8b 77       	andi	r24, 0x7B	; 123
    7e02:	80 93 e8 00 	sts	0x00E8, r24
    7e06:	2d c0       	rjmp	.+90     	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7e08:	80 38       	cpi	r24, 0x80	; 128
    7e0a:	59 f5       	brne	.+86     	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e0c:	80 91 e8 00 	lds	r24, 0x00E8
    7e10:	87 7f       	andi	r24, 0xF7	; 247
    7e12:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7e16:	80 91 b4 01 	lds	r24, 0x01B4
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7e1a:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7e1e:	80 91 e8 00 	lds	r24, 0x00E8
    7e22:	8e 77       	andi	r24, 0x7E	; 126
    7e24:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    7e28:	56 dd       	rcall	.-1364   	; 0x78d6 <Endpoint_ClearStatusStage>
    7e2a:	1b c0       	rjmp	.+54     	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    7e2c:	88 23       	and	r24, r24
    7e2e:	c9 f4       	brne	.+50     	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    7e30:	90 91 b8 01 	lds	r25, 0x01B8
    7e34:	92 30       	cpi	r25, 0x02	; 2
    7e36:	a8 f4       	brcc	.+42     	; 0x7e62 <USB_Device_ProcessControlRequest+0x1f2>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e38:	80 91 e8 00 	lds	r24, 0x00E8
    7e3c:	87 7f       	andi	r24, 0xF7	; 247
    7e3e:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    7e42:	90 93 b4 01 	sts	0x01B4, r25

	Endpoint_ClearStatusStage();
    7e46:	47 dd       	rcall	.-1394   	; 0x78d6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7e48:	80 91 b4 01 	lds	r24, 0x01B4
    7e4c:	88 23       	and	r24, r24
    7e4e:	31 f4       	brne	.+12     	; 0x7e5c <USB_Device_ProcessControlRequest+0x1ec>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    7e50:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7e54:	87 fd       	sbrc	r24, 7
    7e56:	02 c0       	rjmp	.+4      	; 0x7e5c <USB_Device_ProcessControlRequest+0x1ec>
    7e58:	81 e0       	ldi	r24, 0x01	; 1
    7e5a:	01 c0       	rjmp	.+2      	; 0x7e5e <USB_Device_ProcessControlRequest+0x1ee>
    7e5c:	84 e0       	ldi	r24, 0x04	; 4
    7e5e:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    7e60:	94 dc       	rcall	.-1752   	; 0x778a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e62:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7e66:	83 ff       	sbrs	r24, 3
    7e68:	0a c0       	rjmp	.+20     	; 0x7e7e <USB_Device_ProcessControlRequest+0x20e>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7e6a:	80 91 eb 00 	lds	r24, 0x00EB
    7e6e:	80 62       	ori	r24, 0x20	; 32
    7e70:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7e74:	80 91 e8 00 	lds	r24, 0x00E8
    7e78:	87 7f       	andi	r24, 0xF7	; 247
    7e7a:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    7e7e:	0f 90       	pop	r0
    7e80:	0f 90       	pop	r0
    7e82:	cf 91       	pop	r28
    7e84:	df 91       	pop	r29
    7e86:	1f 91       	pop	r17
    7e88:	0f 91       	pop	r16
    7e8a:	08 95       	ret

00007e8c <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    7e8c:	08 95       	ret

00007e8e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    7e8e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7e90:	8e b3       	in	r24, 0x1e	; 30
    7e92:	88 23       	and	r24, r24
    7e94:	61 f0       	breq	.+24     	; 0x7eae <USB_USBTask+0x20>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7e96:	10 91 e9 00 	lds	r17, 0x00E9
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7e9a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7e9e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7ea2:	83 ff       	sbrs	r24, 3
    7ea4:	01 c0       	rjmp	.+2      	; 0x7ea8 <USB_USBTask+0x1a>
		  USB_Device_ProcessControlRequest();
    7ea6:	e4 de       	rcall	.-568    	; 0x7c70 <USB_Device_ProcessControlRequest>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
    7ea8:	17 70       	andi	r17, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
    7eaa:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_Device)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
	#endif
}
    7eae:	1f 91       	pop	r17
    7eb0:	08 95       	ret

00007eb2 <__eerd_byte_m32u4>:
    7eb2:	f9 99       	sbic	0x1f, 1	; 31
    7eb4:	fe cf       	rjmp	.-4      	; 0x7eb2 <__eerd_byte_m32u4>
    7eb6:	92 bd       	out	0x22, r25	; 34
    7eb8:	81 bd       	out	0x21, r24	; 33
    7eba:	f8 9a       	sbi	0x1f, 0	; 31
    7ebc:	99 27       	eor	r25, r25
    7ebe:	80 b5       	in	r24, 0x20	; 32
    7ec0:	08 95       	ret

00007ec2 <__eewr_byte_m32u4>:
    7ec2:	26 2f       	mov	r18, r22

00007ec4 <__eewr_r18_m32u4>:
    7ec4:	f9 99       	sbic	0x1f, 1	; 31
    7ec6:	fe cf       	rjmp	.-4      	; 0x7ec4 <__eewr_r18_m32u4>
    7ec8:	1f ba       	out	0x1f, r1	; 31
    7eca:	92 bd       	out	0x22, r25	; 34
    7ecc:	81 bd       	out	0x21, r24	; 33
    7ece:	20 bd       	out	0x20, r18	; 32
    7ed0:	0f b6       	in	r0, 0x3f	; 63
    7ed2:	f8 94       	cli
    7ed4:	fa 9a       	sbi	0x1f, 2	; 31
    7ed6:	f9 9a       	sbi	0x1f, 1	; 31
    7ed8:	0f be       	out	0x3f, r0	; 63
    7eda:	01 96       	adiw	r24, 0x01	; 1
    7edc:	08 95       	ret

00007ede <_exit>:
    7ede:	f8 94       	cli

00007ee0 <__stop_program>:
    7ee0:	ff cf       	rjmp	.-2      	; 0x7ee0 <__stop_program>
